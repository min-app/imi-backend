input AddAliOssInput {
  key: String!
  value: String!
  expiration: Date!
  clientMutationId: String!
}

type AddAliOssPayload {
  addedAliOssEdge: AliOssEdge
  clientMutationId: String!
}

input AddAndUpdateClinicAdminInput {
  username: String!
  password: String
  realName: String!
  avatarImageId: ImageId!
  clinicId: ClinicId!
  jobPositionId: JobPositionNameId!
  clinicStaffId: ClinicStaffId
  phoneNumber: String
  gender: Float
  email: String
  idCardNumber: String
  jobTitle: String
  jobTypeId: JobTypeNameId
  clientMutationId: String!
}

type AddAndUpdateClinicAdminPayload {
  clinicUser: ClinicUser
  clientMutationId: String!
}

enum AddApplicationCenterApplicationType {
  E01Order
  RetailPharmacy
  Inspection
  HospitalizationManage
  GradedReferral
  Videoconferencing
}

input AddApplicationCenterInput {
  """诊所"""
  clinicId: ClinicId!

  """应用类型"""
  applicationType: AddApplicationCenterApplicationType!

  """是否启用"""
  enabled: Boolean!

  """是否强制启用"""
  forceEnabled: Boolean!
  clientMutationId: String!
}

type AddApplicationCenterPayload {
  addedApplicationCenterEdge: ApplicationCenterEdge
  clientMutationId: String!
}

input AddClinicConfigInput {
  clinicId: ClinicId!
  key: String!
  value: String!
  title: String!
  description: String
  clientMutationId: String!
}

type AddClinicConfigPayload {
  clinicConfigEdge: ClinicConfigEdge
  clientMutationId: String!
}

input AddClinicDepartmentInput {
  clinicId: ClinicId!
  departmentId: DepartmentId!

  """ 默认值:true"""
  enabled: Boolean = true

  """弃用，待删除"""
  name: String

  """弃用，待删除"""
  departmentTypeId: DepartmentTypeNameId
  clientMutationId: String!
}

type AddClinicDepartmentPayload {
  addedClinicDepartmentEdge: ClinicDepartmentEdge
  clientMutationId: String!
}

input AddClinicFunctionModuleConfigInput {
  """诊所"""
  clinicId: ClinicId!

  """功能模块"""
  functionModuleConfigId: FunctionModuleConfigId!

  """key，冗余字段"""
  key: String!

  """停用、启用 默认值:true"""
  enabled: Boolean = true
  clientMutationId: String!
}

type AddClinicFunctionModuleConfigPayload {
  addedClinicFunctionModuleConfigEdge: ClinicFunctionModuleConfigEdge
  clientMutationId: String!
}

input AddClinicIndexInput {
  clinicId: ClinicId!

  """指标日期：精确到月（如：201801）"""
  indexDate: Int!

  """基本指标"""
  baseIndex: Int!
  clientMutationId: String!
}

type AddClinicIndexPayload {
  addedClinicIndexEdge: ClinicIndexEdge
  clientMutationId: String!
}

input AddClinicInput {
  name: String!
  code: String!
  city: CityId!
  coverImage: ImageId
  address: String
  phoneNumber: String
  contactName: String
  description: String
  archived: Boolean!
  longitude: Float
  latitude: Float

  """联系人电话"""
  contactPhone: String

  """大区"""
  areaId: AreaId!

  """省公司"""
  companyId: CompanyId!

  """标签"""
  tags: [String]
  clientMutationId: String!
}

input AddClinicMemberTypeInput {
  name: String!
  clinicId: ClinicId!
  discountCheck: Float!
  discountInspection: Float!
  discountTreatment: Float!
  discountChinesePrescription: Float!
  discountPrescription: Float!
  discountOtherCharge: Float!
  discountDiagnosisCharge: Float!

  """ 默认值:true"""
  enabled: Boolean! = true

  """是否可更改，如普通会员不能更改和删除，为false 默认值:true"""
  mutable: Boolean = true
  clientMutationId: String!
}

type AddClinicMemberTypePayload {
  addedClinicMemberTypeEdge: ClinicMemberTypeEdge
  clientMutationId: String!
}

input AddClinicPatientRangeInput {
  """诊所ID"""
  clinicId: ClinicId!

  """关联诊所ID"""
  relationClinicIds: [ClinicId]!
  clientMutationId: String!
}

type AddClinicPatientRangePayload {
  clinic: Clinic
  clientMutationId: String!
}

type AddClinicPayload {
  addedClinicEdge: ClinicEdge
  clientMutationId: String!
}

input AddClinicRecordInput {
  description: String
  comment: String
  clinicId: ClinicId!
  status: AddClinicRecordStatus!
  clientMutationId: String!
}

type AddClinicRecordPayload {
  clinicRecord: ClinicRecord
  clientMutationId: String!
}

enum AddClinicRecordStatus {
  Pending
  Opening
  Closing
}

input AddClinicRoleInput {
  clinicUserId: ClinicUserId!

  """诊所"""
  clinicId: ClinicId

  """ 'Admin', 'Market', 'Finance', 'Personnel', 'Boss', 'Staff',
  'DoctorWorkstation', 'NurseWorkstation', 'PharmacyWorkstation', 'CashierDesk',
  'ClinicWorkstation'，其他的弃用
  """
  name: AddClinicRoleName!

  """前台权限、后台权限"""
  permissionType: AddClinicRolePermissionType

  """后台权限范围类型：全站、区域、诊所"""
  scopeType: AddClinicRoleScopeType
  clientMutationId: String!
}

enum AddClinicRoleName {
  SystemAdmin
  SystemOperator
  ClinicAdmin
  Guidance
  Cashier
  Doctor
  StockKeeper
  Pharmacist
  Wisdom
  Admin
  Market
  Finance
  Personnel
  Boss
  Staff
  DoctorWorkstation
  NurseWorkstation
  PharmacyWorkstation
  CashierDesk
  ClinicWorkstation
}

type AddClinicRolePayload {
  addedClinicRoleEdge: ClinicRoleEdge
  clientMutationId: String!
}

enum AddClinicRolePermissionType {
  Frontend
  Backend
}

enum AddClinicRoleScopeType {
  Site
  Area
  Clinic
}

input AddClinicRoomInput {
  clinicId: ClinicId!
  name: String!
  enabled: Boolean!
  clinicRoomTypeId: RoomTypeNameId!

  """是否默认诊室（快速接诊时使用默认诊室） 默认值:false"""
  isDefault: Boolean = false
  clientMutationId: String!
}

type AddClinicRoomPayload {
  addedClinicRoomEdge: ClinicRoomEdge
  clientMutationId: String!
}

input AddClinicStaffV2Input {
  clinicUserId: ClinicUserId!
  clinicId: ClinicId!
  realName: String!
  gender: Int

  """生日"""
  birthday: Date
  idCardNumber: String
  email: String
  cityId: CityId!
  provinceId: ProvinceId!
  clinicWechatUserId: ClinicWechatUserId
  userCode: String!
  jobPositionId: JobPositionNameId!
  clinicDepartmentId: ClinicDepartmentId
  jobTypeId: JobTypeNameId
  reservationFee: Float
  insteadDoctorId: DoctorId
  doctorId: DoctorId
  nurseId: NurseId
  clientMutationId: String!
}

type AddClinicStaffV2Payload {
  clinicStaff: ClinicStaff
  clientMutationId: String!
}

input AddClinicUserInput {
  username: String!
  password: String!
  realName: String
  isBlocked: Boolean
  phoneNumber: String
  clientMutationId: String!
}

type AddClinicUserPayload {
  clinicUser: ClinicUser
  clientMutationId: String!
}

input AddClinicUserPermissionInput {
  """用户角色"""
  clinicRoleId: ClinicRoleId!

  """前端权限：功能权限编码"""
  actionPermission: String

  """诊所权限：诊所"""
  clinicPermissionId: ClinicId

  """区域权限：省"""
  provincePermissionId: ProvinceId

  """区域权限：市"""
  cityPermissionId: CityId
  clientMutationId: String!
}

type AddClinicUserPermissionPayload {
  addedClinicUserPermissionEdge: ClinicUserPermissionEdge
  clientMutationId: String!
}

input AddClinicUserRoleInput {
  role: String
  clientMutationId: String!
}

type AddClinicUserRolePayload {
  addedClinicUserRoleEdge: ClinicUserRoleEdge
  clientMutationId: String!
}

input AddClinicUserSessionInput {
  clinicUserId: ClinicUserId!
  clinicId: ClinicId
  accessToken: String!
  lastActiveAt: Date
  clientMutationId: String!
}

type AddClinicUserSessionPayload {
  addedClinicUserSessionEdge: ClinicUserSessionEdge
  clientMutationId: String!
}

input AddClinicUserStudyInput {
  clinicUserId: ClinicUserId!

  """课程事件类型"""
  lessonKey: String!

  """课程名称"""
  lessonName: String!

  """
  课程类型(Clinic: "诊所站", Pharmacy: "药房站", Nurse: "护士站", Collect: "收银站", Doctor: "医生站")
  """
  lessonType: AddClinicUserStudyLessonType!

  """ 默认值:2"""
  star: Int! = 2
  clientMutationId: String!
}

enum AddClinicUserStudyLessonType {
  Clinic
  Pharmacy
  Nurse
  Collect
  Doctor
}

type AddClinicUserStudyPayload {
  addedClinicUserStudyEdge: ClinicUserStudyEdge
  clientMutationId: String!
}

input AddClinicWechatUserInput {
  openid: String!
  nickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float
  province: String
  city: String

  """国家，如中国为CN"""
  country: String
  headImgUrl: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String
  clientMutationId: String!
}

type AddClinicWechatUserPayload {
  addedClinicWechatUserEdge: ClinicWechatUserEdge
  clientMutationId: String!
}

input AddConfigInput {
  key: String!

  """JSON格式字符串,key值为驼峰命名方式"""
  value: String!
  title: String!
  description: String
  clientMutationId: String!
}

type AddConfigPayload {
  clinicConfigEdge: ConfigEdge
  clientMutationId: String!
}

input AddContactMsgInput {
  """模板标题"""
  title: String!

  """模板说明（触发规则）"""
  description: String!

  """消息key"""
  key: AddContactMsgKey!

  """触达范围。PATIENTS：全部患者；CLINICS：诊所"""
  target: AddContactMsgTarget!

  """短信模板，json对象，data：消息内容；priority：优先级，0-4，值越高优先级越高。0：不启用；"""
  sms: Json

  """
  微信模板，同短信，data里面再分级。{templateId：模板id；url：跳转链接；data：[{name, key, value}]}
  """
  wechat: Json

  """邮件模板，同短信。data里面再分级 {title, content}"""
  email: Json

  """模板状态：NORMAL：正常；BLOCKED：已停用 默认值:NORMAL"""
  status: AddContactMsgStatus = NORMAL
  clientMutationId: String!
}

enum AddContactMsgKey {
  ORDER_OFFLINE
  ORDER_ONLINE
  ORDER_IN_SITE
  PATIENT_DAY
  PATIENT_TODAY
  MEDICINE_EXPIRING
  MEDICINE_EXPIRED
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

type AddContactMsgPayload {
  addedContactMsgEdge: ContactMsgEdge
  clientMutationId: String!
}

input AddContactMsgQueueInput {
  """诊所id"""
  clinicId: Float

  """对象id"""
  originId: Float!

  """消息队列 默认值:MEDICINE_EXPIRING"""
  type: AddContactMsgQueueType = MEDICINE_EXPIRING

  """消息队列状态 默认值:waiting"""
  status: AddContactMsgQueueStatus = waiting
  clientMutationId: String!
}

type AddContactMsgQueuePayload {
  addedContactMsgQueueEdge: ContactMsgQueueEdge
  clientMutationId: String!
}

enum AddContactMsgQueueStatus {
  waiting
  send
  finished
}

enum AddContactMsgQueueType {
  MEDICINE_EXPIRING
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

enum AddContactMsgStatus {
  NORMAL
  BLOCKED
}

enum AddContactMsgTarget {
  PATIENTS
  CLINICS
}

input AddExpressCompanyInput {
  """公司名字"""
  name: String!

  """公司编码"""
  code: String!

  """备注信息"""
  remark: String

  """国家英文"""
  en: String
  clientMutationId: String!
}

type AddExpressCompanyPayload {
  addedExpressCompanyEdge: ExpressCompanyEdge
  clientMutationId: String!
}

input AddFileInput {
  name: String
  url: String
  size: Float
  contentType: String
  clientMutationId: String!
}

type AddFilePayload {
  addedFileEdge: FileEdge
  clientMutationId: String!
}

input AddFunctionModuleConfigInput {
  """名称"""
  name: String!

  """key，不可修改"""
  key: String!

  """默认值：是否开启"""
  defaultValue: Boolean!
  clientMutationId: String!
}

type AddFunctionModuleConfigPayload {
  addedFunctionModuleConfigEdge: FunctionModuleConfigEdge
  clientMutationId: String!
}

input AddHospitalDepartmentInput {
  name: String!
  hospitalId: HospitalId!
  clientMutationId: String!
}

type AddHospitalDepartmentPayload {
  addedHospitalDepartmentEdge: HospitalDepartmentEdge
  clientMutationId: String!
}

enum AddHospitalHospitalType {
  Public
  Private
  Unknown
}

input AddHospitalInput {
  name: String!
  code: String

  """别名，多个以逗号隔开；"""
  alias: String
  provinceId: ProvinceId!
  cityId: CityId!
  districtId: DistrictId

  """大区"""
  areaId: AreaId
  companyId: CompanyId
  levelId: LevelId

  """Public:公立，Private:民营，Unknown：未知"""
  hospitalType: AddHospitalHospitalType

  """ 默认值:true"""
  enabled: Boolean = true
  clientMutationId: String!
}

type AddHospitalPayload {
  addedHospitalEdge: HospitalEdge
  clientMutationId: String!
}

input AddImageInput {
  url: String
  size: Float
  contentType: String
  clientMutationId: String!
}

type AddImagePayload {
  addedImageEdge: ImageEdge
  clientMutationId: String!
}

input AddOrUpdateClinicInput {
  clinicId: ClinicId
  name: String
  cityId: CityId
  provinceId: ProvinceId
  coverImageId: ImageId
  address: String
  phoneNumber: String
  contactName: String
  description: String
  archived: Boolean
  longitude: Float
  latitude: Float

  """联系人电话"""
  contactPhone: String

  """大区"""
  areaId: AreaId!

  """省公司"""
  companyId: CompanyId!

  """标签"""
  tags: [String]
  openTime: Date
  closeTime: Date
  clientMutationId: String!
}

type AddOrUpdateClinicPayload {
  clinic: Clinic
  clientMutationId: String!
}

input AddOrUpdateClinicUserConfigInput {
  """诊所用户ID"""
  clinicUserId: ClinicUserId!

  """JSON格式字符串"""
  value: String!
  clientMutationId: String!
}

type AddOrUpdateClinicUserConfigPayload {
  clinicUserConfig: ClinicUserConfig
  clientMutationId: String!
}

input AddOrUpdateClinicZhyfConfigInput {
  clinicId: ClinicId!
  value: String!
  clientMutationId: String!
}

type AddOrUpdateClinicZhyfConfigPayload {
  clinicConfig: ClinicConfig
  clientMutationId: String!
}

enum AddOrUpdateDoctorBaseInfoDoctorType {
  clinicFullTime
  clinicExpert
  alu
  hierarchicalDiagnosis
  livzonCustomer
  externalDoctor
}

input AddOrUpdateDoctorBaseInfoInput {
  """医生id"""
  doctorId: DoctorId

  """真实姓名"""
  realName: String!

  """手机号"""
  phoneNumber: String!

  """出生日期"""
  birthday: Date

  """性别"""
  gender: Int

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """医生执业资格证"""
  qualification: String
  provinceId: ProvinceId!
  cityId: CityId!

  """头像"""
  avatarImageId: ImageId

  """诊所微信用户"""
  clinicWechatUserId: ClinicWechatUserId

  """系统身份：诊所全职医生，诊所坐诊专家，阿鹿医生，分级诊疗医生，丽珠医生客户,诊所院外专家"""
  doctorType: AddOrUpdateDoctorBaseInfoDoctorType!
  hospitals: [HospitalId]
  departmentId: DepartmentId

  """擅长疾病标签"""
  expertiseTag: [String]

  """擅长领域"""
  expertise: String
  introduce: String
  clientMutationId: String!
}

type AddOrUpdateDoctorBaseInfoPayload {
  doctor: Doctor
  clientMutationId: String!
}

input AddOrUpdateHospitalInput {
  hospitalId: HospitalId
  name: String!
  code: String

  """别名"""
  alias: [String]
  companyId: CompanyId
  areaId: AreaId
  cityId: CityId
  provinceId: ProvinceId
  districtId: DistrictId
  hospitalType: String
  levelId: LevelId
  clientMutationId: String!
}

type AddOrUpdateHospitalPayload {
  hospital: Hospital
  clientMutationId: String!
}

input AddOrUpdateNurseInput {
  nurseId: NurseId
  realName: String!
  phoneNumber: String!
  gender: Int
  birthday: Date
  email: String
  idCardNumber: String

  """护士执业资格证"""
  qualification: String
  provinceId: ProvinceId
  cityId: CityId
  clinicWechatUserId: ClinicWechatUserId
  clientMutationId: String!
}

type AddOrUpdateNursePayload {
  nurse: Nurse
  clientMutationId: String!
}

input AddOrUpdateZHYFDoctorBaseInfoInput {
  """医生id"""
  doctorId: DoctorId

  """真实姓名"""
  realName: String!

  """手机号"""
  phoneNumber: String!

  """出生日期"""
  birthday: Date

  """性别"""
  gender: Int

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """医生执业资格证"""
  qualification: String
  provinceId: ProvinceId
  cityId: CityId

  """头像"""
  avatarImageId: ImageId

  """诊所微信用户"""
  clinicWechatUserId: ClinicWechatUserId
  hospitals: [HospitalId]
  departmentId: DepartmentId

  """擅长疾病标签"""
  expertiseTag: [String]

  """擅长领域"""
  expertise: String
  introduce: String
  clientMutationId: String!
}

type AddOrUpdateZHYFDoctorBaseInfoPayload {
  doctor: Doctor
  clientMutationId: String!
}

input AddPatientInput {
  """真实姓名"""
  realName: String!

  """1 男；2 女；3 不详"""
  gender: Int

  """出生日期"""
  dateOfBirth: Date

  """年龄"""
  age: Float

  """年龄记录时间"""
  ageRecordedAt: Date

  """手机号"""
  phoneNumber: String

  """电话"""
  telephoneNumber: String

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """婚否"""
  maritalStatus: String

  """职业"""
  occupation: String

  """名族"""
  ethnicGroup: String

  """公司"""
  company: String

  """所在省"""
  provinceId: ProvinceId

  """所在市"""
  cityId: CityId

  """详细地址"""
  address: String

  """出生地"""
  birthPlace: String

  """来源"""
  source: String

  """头像"""
  avatarImageId: ImageId

  """诊所会员序列号"""
  clinicMemberSerialNo: String

  """社保卡"""
  socialSecurityCard: String

  """拼音码"""
  pinyinCode: String

  """手机号码是否已验证 默认值:false"""
  validatedPhone: Boolean! = false
  clientMutationId: String!
}

type AddPatientPayload {
  addedPatientEdge: PatientEdge
  clientMutationId: String!
}

input AddPermissionInput {
  """权限名称"""
  name: String!

  """权限编码"""
  code: String!

  """排序"""
  sort: Int!

  """父权限编码"""
  parentCode: String
  clientMutationId: String!
}

type AddPermissionPayload {
  addedPermissionEdge: PermissionEdge
  clientMutationId: String!
}

input AddSearchInput {
  word: String
  clientMutationId: String!
}

type AddSearchPayload {
  addedSearchEdge: SearchEdge
  clientMutationId: String!
}

input AddTaskInput {
  condition: Json
  type: AddTaskType!
  clinicId: ClinicId
  startAt: Date
  endAt: Date
  clientMutationId: String!
}

type AddTaskPayload {
  addedTaskEdge: TaskEdge
  clientMutationId: String!
}

enum AddTaskType {
  ExportBillingItemReport
  ExportBillingRecordDailyReport
  ExportBillingRecordSummaryReport
  ExportStockDeliveryReport
  ExportStockEntryReport
  ExportStockReport
  ExportMaterialDeliveryReport
  ExportMaterialEntryReport
  ExportMaterialStockReport
  ImportDrug
  ExportDoctorBusinessReport
  ExportFinancialDailyReport
  ExportCheckBody
}

input AddUserPatientInput {
  """真实姓名"""
  realName: String!

  """1 男；2 女；3 不详"""
  gender: Int

  """出生日期"""
  dateOfBirth: Date

  """年龄"""
  age: Float

  """记录时的年龄"""
  ageRecordedAt: Date

  """手机号"""
  phoneNumber: String

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """婚否"""
  maritalStatus: String

  """职业"""
  occupation: String

  """民族"""
  ethnicGroup: String

  """公司"""
  company: String

  """所在省"""
  province: ProvinceId

  """所在市"""
  city: CityId

  """详细地址"""
  address: String

  """出生地"""
  birthPlace: String

  """来源"""
  source: String

  """头像"""
  avatarImage: ImageId

  """会员序列号"""
  clinicMemberSerialNo: String

  """是否默认"""
  isDefault: Boolean
  clientMutationId: String!
}

type AddUserPatientPayload {
  userPatientEdge: UserPatientEdge
  clientMutationId: String!
}

input AddVersionHistoryInput {
  """版本名称"""
  name: String!

  """链接"""
  link: String!

  """版本描述"""
  description: String

  """开始时间"""
  startAt: Date!

  """结束时间"""
  endAt: Date!

  """创建者，关联诊所用户id"""
  createdById: ClinicUserId!

  """是否可用 默认值:true"""
  enabled: Boolean = true
  clientMutationId: String!
}

type AddVersionHistoryPayload {
  addedVersionHistoryEdge: VersionHistoryEdge
  clientMutationId: String!
}

"""ali-oss的配置，token"""
type AliOss implements Node {
  id: ID!
  key: String!
  value: String!
  expiration: Date!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type AliOssConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AliOssEdge]
  count: Float
}

"""An edge in a connection."""
type AliOssEdge {
  """The item at the end of the edge"""
  node: AliOss

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of AliOss"""
scalar AliOssId

input AliOsssConditionInput {
  key: String
  value: String
  expiration: DateConditionInput
}

input AliOsssKeywordsInput {
  fields: [String]!
  value: String!
}

input AliOsssOptionsInput {
  where: Json
  group: String
}

input AliOsssSortInput {
  field: String
  order: SortOrder
}

"""应用中心"""
type ApplicationCenter implements Node {
  id: ID!
  clinicId: ID

  """诊所"""
  clinic: Clinic!

  """应用类型"""
  applicationType: ApplicationCenterApplicationType!

  """是否启用"""
  enabled: Boolean!

  """是否强制启用"""
  forceEnabled: Boolean!
  createdAt: Date
  updatedAt: Date
}

enum ApplicationCenterApplicationType {
  E01Order
  RetailPharmacy
  Inspection
  HospitalizationManage
  GradedReferral
  Videoconferencing
}

"""A connection to a list of items."""
type ApplicationCenterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApplicationCenterEdge]
  count: Float
}

"""An edge in a connection."""
type ApplicationCenterEdge {
  """The item at the end of the edge"""
  node: ApplicationCenter

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ApplicationCenter"""
scalar ApplicationCenterId

enum ApplicationCentersConditionApplicationType {
  E01Order
  RetailPharmacy
  Inspection
  HospitalizationManage
  GradedReferral
  Videoconferencing
}

input ApplicationCentersConditionInput {
  """诊所"""
  clinicId: ClinicId

  """应用类型"""
  applicationType: ApplicationCentersConditionApplicationType

  """是否启用"""
  enabled: Boolean

  """是否强制启用"""
  forceEnabled: Boolean
}

input ApplicationCentersKeywordsInput {
  fields: [String]!
  value: String!
}

input ApplicationCentersOptionsInput {
  where: Json
  group: String
}

input ApplicationCentersSortInput {
  field: String
  order: SortOrder
}

"""大区"""
type Area implements Node {
  id: ID!

  """大区名"""
  name: String

  """大区编码"""
  code: String
  createdAt: Date
  updatedAt: Date
  companys(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): CompanyConnection
}

"""A connection to a list of items."""
type AreaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AreaEdge]
  count: Float
}

"""An edge in a connection."""
type AreaEdge {
  """The item at the end of the edge"""
  node: Area

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Area"""
scalar AreaId

input AreasConditionInput {
  """大区名"""
  name: String

  """大区编码"""
  code: String
}

input AreasKeywordsInput {
  fields: [String]!
  value: String!
}

input AreasOptionsInput {
  where: Json
  group: String
}

input AreasSortInput {
  field: String
  order: SortOrder
}

input AssignDefaultClinicMemberType2PatientInput {
  patientId: PatientId!
  clinicId: ClinicId!
  clientMutationId: String!
}

type AssignDefaultClinicMemberType2PatientPayload {
  patient: Patient
  clientMutationId: String!
}

input BindUserPhoneInput {
  phoneNumber: String!
  clientMutationId: String!
}

type BindUserPhonePayload {
  ok: Boolean
  clientMutationId: String!
}

input CheckSmsCodeInput {
  phoneNumber: String!

  """ 默认值:86"""
  countryCode: String = "86"
  code: String!
  clientMutationId: String!
}

type CheckSmsCodePayload {
  match: Boolean
  reason: String
  clientMutationId: String!
}

"""城市"""
type City implements Node {
  id: ID!

  """城市名"""
  name: String

  """城市编码"""
  code: String
  provinceId: ID

  """所属省id"""
  province: Province!

  """邮政编码"""
  postCode: String

  """已激活的：只有当该区域创建了诊所时，该区域自动变为可用"""
  activated: Boolean
  createdAt: Date
  updatedAt: Date
  clinics(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicConnection
  districts(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): DistrictConnection
}

"""A connection to a list of items."""
type CityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CityEdge]
  count: Float
}

"""An edge in a connection."""
type CityEdge {
  """The item at the end of the edge"""
  node: City

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of City"""
scalar CityId

input CitysConditionInput {
  """城市名"""
  name: String

  """城市编码"""
  code: String

  """所属省id"""
  provinceId: ProvinceId

  """邮政编码"""
  postCode: String

  """已激活的：只有当该区域创建了诊所时，该区域自动变为可用"""
  activated: Boolean
}

input CitysKeywordsInput {
  fields: [String]!
  value: String!
}

input CitysOptionsInput {
  where: Json
  group: String
}

input CitysSortInput {
  field: String
  order: SortOrder
}

"""诊所模型"""
type Clinic implements Node {
  id: ID!

  """诊所名称"""
  name: String!

  """诊所代码"""
  code: String!
  cityId: ID

  """诊所所在城市"""
  city: City!
  provinceId: ID

  """诊所所在省份"""
  province: Province
  areaId: ID

  """诊所所在大区"""
  area: Area
  companyId: ID

  """诊所所属省公司"""
  company: Company
  coverImageId: ID

  """诊所封面"""
  coverImage: Image

  """诊所地址"""
  address: String

  """诊所联系人号码"""
  phoneNumber: String

  """诊所联系人姓名"""
  contactName: String

  """诊所联系人电话"""
  contactPhone: String

  """诊所简介"""
  description: String

  """是否归档"""
  archived: Boolean!

  """诊所经度"""
  longitude: Float

  """诊所纬度"""
  latitude: Float

  """是否为院外处方诊所"""
  isE01Clinic: Boolean

  """诊所是否可预约"""
  isReservation: Boolean

  """诊所标签"""
  tags: String

  """诊所营业状态"""
  status: String

  """营业开始时间"""
  openTime: Date

  """营业结束时间"""
  closeTime: Date
  createdAt: Date
  updatedAt: Date
  clinicTags: [String]
  zhyfConfig: ClinicZhyfConfig

  """默认诊室"""
  defaultClinicRoom: ClinicRoom
  clinicalRecordTotal(date: Date): Float
  reservationTotal(date: Date): Float
  userClinicalRecordTotal(date: Date): Float
  userVisitClinicalRecordTotal(date: Date): Float
  doctorCount: Float
  clinicDepartments(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicDepartmentConnection
  clinicConfig(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicConfigConnection
  clinicFiles(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicFileConnection
  applicationCenters(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ApplicationCenterConnection
  clinicPatientRanges(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicPatientRangeConnection
}

type ClinicConfig implements Node {
  id: ID!
  clinicId: ID
  clinic: Clinic
  key: String

  """JSON格式字符串,key值为驼峰命名方式"""
  value: String
  title: String
  description: String
  readOnly: Boolean

  """是否需要默认设置"""
  isSetDefault: Boolean
  createdAt: Date
  updatedAt: Date
  parseValue: Json
}

"""A connection to a list of items."""
type ClinicConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicConfigEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicConfigEdge {
  """The item at the end of the edge"""
  node: ClinicConfig

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicConfig"""
scalar ClinicConfigId

input ClinicConfigsConditionInput {
  clinicId: ClinicId
  key: String

  """JSON格式字符串,key值为驼峰命名方式"""
  value: String
  title: String
  description: String
  readOnly: Boolean

  """是否需要默认设置"""
  isSetDefault: Boolean
}

input ClinicConfigsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicConfigsOptionsInput {
  where: Json
  group: String
}

input ClinicConfigsSortInput {
  field: String
  order: SortOrder
}

"""A connection to a list of items."""
type ClinicConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicEdge]
  count: Float
}

type ClinicDepartment implements Node {
  id: ID!
  clinicId: ID
  clinic: Clinic!
  departmentId: ID
  department: Department!
  enabled: Boolean

  """弃用，待删除"""
  name: String
  departmentTypeId: ID

  """弃用，待删除"""
  departmentType: DepartmentTypeName
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicDepartmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicDepartmentEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicDepartmentEdge {
  """The item at the end of the edge"""
  node: ClinicDepartment

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicDepartment"""
scalar ClinicDepartmentId

input ClinicDepartmentsConditionInput {
  clinicId: ClinicId
  departmentId: DepartmentId
  enabled: Boolean

  """弃用，待删除"""
  name: String

  """弃用，待删除"""
  departmentTypeId: DepartmentTypeNameId
}

input ClinicDepartmentsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicDepartmentsOptionsInput {
  where: Json
  group: String
}

input ClinicDepartmentsSortInput {
  field: String
  order: SortOrder
}

"""An edge in a connection."""
type ClinicEdge {
  """The item at the end of the edge"""
  node: Clinic

  """A cursor for use in pagination"""
  cursor: String!
}

type ClinicFile implements Node {
  id: ID!
  clinicId: ID
  clinic: Clinic!
  fileId: ID
  file: File!
  createdById: ID
  createdBy: ClinicUser!
  description: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicFileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicFileEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicFileEdge {
  """The item at the end of the edge"""
  node: ClinicFile

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicFile"""
scalar ClinicFileId

input ClinicFilesConditionInput {
  clinicId: ClinicId
  fileId: FileId
  createdById: ClinicUserId
  description: String
}

input ClinicFilesKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicFilesOptionsInput {
  where: Json
  group: String
}

input ClinicFilesSortInput {
  field: String
  order: SortOrder
}

"""诊所功能模块配置"""
type ClinicFunctionModuleConfig implements Node {
  id: ID!
  clinicId: ID

  """诊所"""
  clinic: Clinic!
  functionModuleConfigId: ID

  """功能模块"""
  functionModuleConfig: FunctionModuleConfig!

  """key，冗余字段"""
  key: String!

  """停用、启用"""
  enabled: Boolean
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
}

"""A connection to a list of items."""
type ClinicFunctionModuleConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicFunctionModuleConfigEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicFunctionModuleConfigEdge {
  """The item at the end of the edge"""
  node: ClinicFunctionModuleConfig

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicFunctionModuleConfig"""
scalar ClinicFunctionModuleConfigId

input ClinicFunctionModuleConfigsConditionInput {
  """诊所"""
  clinicId: ClinicId

  """功能模块"""
  functionModuleConfigId: FunctionModuleConfigId

  """key，冗余字段"""
  key: String

  """停用、启用"""
  enabled: Boolean
}

input ClinicFunctionModuleConfigsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicFunctionModuleConfigsOptionsInput {
  where: Json
  group: String
}

input ClinicFunctionModuleConfigsSortInput {
  field: String
  order: SortOrder
}

"""Global id of Clinic"""
scalar ClinicId

"""诊所指标"""
type ClinicIndex implements Node {
  id: ID!
  clinicId: ID
  clinic: Clinic!

  """指标日期：精确到月（如：201801）"""
  indexDate: Int!

  """基本指标"""
  baseIndex: Int!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicIndexConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicIndexEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicIndexEdge {
  """The item at the end of the edge"""
  node: ClinicIndex

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicIndex"""
scalar ClinicIndexId

input ClinicIndexsConditionInput {
  clinicId: ClinicId

  """指标日期：精确到月（如：201801）"""
  indexDate: Int

  """基本指标"""
  baseIndex: Int
}

input ClinicIndexsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicIndexsOptionsInput {
  where: Json
  group: String
}

input ClinicIndexsSortInput {
  field: String
  order: SortOrder
}

type ClinicMemberType implements Node {
  id: ID!
  name: String!
  clinicId: ID
  clinic: Clinic!
  discountCheck: Float!
  discountInspection: Float!
  discountTreatment: Float!
  discountChinesePrescription: Float!
  discountPrescription: Float!
  discountOtherCharge: Float!
  discountDiagnosisCharge: Float!
  enabled: Boolean!

  """是否可更改，如普通会员不能更改和删除，为false"""
  mutable: Boolean
  deletedAt: Date
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicMemberTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicMemberTypeEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicMemberTypeEdge {
  """The item at the end of the edge"""
  node: ClinicMemberType

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicMemberType"""
scalar ClinicMemberTypeId

input ClinicMemberTypesConditionInput {
  name: String
  clinicId: ClinicId
  discountCheck: Float
  discountInspection: Float
  discountTreatment: Float
  discountChinesePrescription: Float
  discountPrescription: Float
  discountOtherCharge: Float
  discountDiagnosisCharge: Float
  enabled: Boolean

  """是否可更改，如普通会员不能更改和删除，为false"""
  mutable: Boolean
  deletedAt: DateConditionInput
}

input ClinicMemberTypesKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicMemberTypesOptionsInput {
  where: Json
  group: String
}

input ClinicMemberTypesSortInput {
  field: String
  order: SortOrder
}

"""患者诊所关联"""
type ClinicPatientRange implements Node {
  id: ID!
  clinicId: ID

  """诊所"""
  clinic: Clinic!
  relationClinicId: ID

  """关联诊所"""
  relationClinic: Clinic!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicPatientRangeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicPatientRangeEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicPatientRangeEdge {
  """The item at the end of the edge"""
  node: ClinicPatientRange

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicPatientRange"""
scalar ClinicPatientRangeId

input ClinicPatientRangesConditionInput {
  """诊所"""
  clinicId: ClinicId

  """关联诊所"""
  relationClinicId: ClinicId
}

input ClinicPatientRangesKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicPatientRangesOptionsInput {
  where: Json
  group: String
}

input ClinicPatientRangesSortInput {
  field: String
  order: SortOrder
}

type ClinicQuantityPayload {
  province: Province
  cities: [ClinicQuantityPayloadCities]
}

type ClinicQuantityPayloadCities {
  city: City
  count: Int
}

type ClinicRecord implements Node {
  id: ID!
  clinicId: ID
  clinic: Clinic!
  createdById: ID
  createdBy: ClinicUser!
  beforeStatus: String
  updatedStatus: String
  comment: String
  description: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicRecordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicRecordEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicRecordEdge {
  """The item at the end of the edge"""
  node: ClinicRecord

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicRecord"""
scalar ClinicRecordId

input ClinicRecordsConditionInput {
  clinicId: ClinicId
  createdById: ClinicUserId
  beforeStatus: String
  updatedStatus: String
  comment: String
  description: String
}

input ClinicRecordsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicRecordsOptionsInput {
  where: Json
  group: String
}

input ClinicRecordsSortInput {
  field: String
  order: SortOrder
}

type ClinicRole implements Node {
  id: ID!
  clinicUserId: ID
  clinicUser: ClinicUser!
  clinicId: ID

  """诊所"""
  clinic: Clinic

  """ 'Admin', 'Market', 'Finance', 'Personnel', 'Boss', 'Staff',
  'DoctorWorkstation', 'NurseWorkstation', 'PharmacyWorkstation', 'CashierDesk',
  'ClinicWorkstation'，其他的弃用
  """
  name: ClinicRoleName!

  """前台权限、后台权限"""
  permissionType: ClinicRolePermissionType

  """后台权限范围类型：全站、区域、诊所"""
  scopeType: ClinicRoleScopeType
  createdAt: Date
  updatedAt: Date
  clinicUserPermissions(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicUserPermissionConnection
}

"""A connection to a list of items."""
type ClinicRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicRoleEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicRoleEdge {
  """The item at the end of the edge"""
  node: ClinicRole

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicRole"""
scalar ClinicRoleId

enum ClinicRoleName {
  SystemAdmin
  SystemOperator
  ClinicAdmin
  Guidance
  Cashier
  Doctor
  StockKeeper
  Pharmacist
  Wisdom
  Admin
  Market
  Finance
  Personnel
  Boss
  Staff
  DoctorWorkstation
  NurseWorkstation
  PharmacyWorkstation
  CashierDesk
  ClinicWorkstation
}

enum ClinicRolePermissionType {
  Frontend
  Backend
}

input ClinicRolesConditionInput {
  clinicUserId: ClinicUserId

  """诊所"""
  clinicId: ClinicId

  """ 'Admin', 'Market', 'Finance', 'Personnel', 'Boss', 'Staff',
  'DoctorWorkstation', 'NurseWorkstation', 'PharmacyWorkstation', 'CashierDesk',
  'ClinicWorkstation'，其他的弃用
  """
  name: ClinicRolesConditionName

  """前台权限、后台权限"""
  permissionType: ClinicRolesConditionPermissionType

  """后台权限范围类型：全站、区域、诊所"""
  scopeType: ClinicRolesConditionScopeType
}

enum ClinicRolesConditionName {
  SystemAdmin
  SystemOperator
  ClinicAdmin
  Guidance
  Cashier
  Doctor
  StockKeeper
  Pharmacist
  Wisdom
  Admin
  Market
  Finance
  Personnel
  Boss
  Staff
  DoctorWorkstation
  NurseWorkstation
  PharmacyWorkstation
  CashierDesk
  ClinicWorkstation
}

enum ClinicRolesConditionPermissionType {
  Frontend
  Backend
}

enum ClinicRolesConditionScopeType {
  Site
  Area
  Clinic
}

enum ClinicRoleScopeType {
  Site
  Area
  Clinic
}

input ClinicRolesKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicRolesOptionsInput {
  where: Json
  group: String
}

input ClinicRolesSortInput {
  field: String
  order: SortOrder
}

type ClinicRoom implements Node {
  id: ID!
  clinicId: ID
  clinic: Clinic!
  name: String!
  enabled: Boolean!
  clinicRoomTypeId: ID
  clinicRoomType: RoomTypeName!

  """是否默认诊室（快速接诊时使用默认诊室）"""
  isDefault: Boolean
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicRoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicRoomEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicRoomEdge {
  """The item at the end of the edge"""
  node: ClinicRoom

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicRoom"""
scalar ClinicRoomId

input ClinicRoomsConditionInput {
  clinicId: ClinicId
  name: String
  enabled: Boolean
  clinicRoomTypeId: RoomTypeNameId

  """是否默认诊室（快速接诊时使用默认诊室）"""
  isDefault: Boolean
}

input ClinicRoomsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicRoomsOptionsInput {
  where: Json
  group: String
}

input ClinicRoomsSortInput {
  field: String
  order: SortOrder
}

input ClinicsConditionInput {
  """诊所名称"""
  name: String

  """诊所代码"""
  code: String

  """诊所所在城市"""
  cityId: CityId

  """诊所所在省份"""
  provinceId: ProvinceId

  """诊所所在大区"""
  areaId: AreaId

  """诊所所属省公司"""
  companyId: CompanyId

  """诊所封面"""
  coverImageId: ImageId

  """诊所地址"""
  address: String

  """诊所联系人号码"""
  phoneNumber: String

  """诊所联系人姓名"""
  contactName: String

  """诊所联系人电话"""
  contactPhone: String

  """诊所简介"""
  description: String

  """是否归档"""
  archived: Boolean

  """诊所经度"""
  longitude: Float

  """诊所纬度"""
  latitude: Float

  """是否为院外处方诊所"""
  isE01Clinic: Boolean

  """诊所是否可预约"""
  isReservation: Boolean

  """诊所标签"""
  tags: String

  """诊所营业状态"""
  status: String
  openTime: DateConditionInput
  closeTime: DateConditionInput
}

input ClinicsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicsOptionsInput {
  where: Json
  group: String
}

input ClinicsSortInput {
  field: String
  order: SortOrder
}

"""人员信息"""
type ClinicStaff implements Node {
  id: ID!

  """省编号2位+市编号2位+人员唯一ID 6位 共10位数字"""
  userCode: String
  realName: String!
  jobPositionId: ID
  jobPosition: JobPositionName
  jobTypeId: ID
  jobType: JobTypeName
  gender: Int

  """生日"""
  birthday: Date
  email: String
  idCardNumber: String
  cityId: ID
  city: City
  provinceId: ID
  province: Province
  clinicUserId: ID
  clinicUser: ClinicUser
  avatarImageId: ID
  avatarImage: Image
  clinicId: ID
  clinic: Clinic

  """是否默认诊所"""
  isDefault: Boolean
  isClinicAdmin: Boolean

  """有效标识"""
  enabled: Boolean

  """账号是否停用，默认启用"""
  isBlocked: Boolean
  doctorId: ID
  doctor: Doctor
  insteadDoctorId: ID
  insteadDoctor: Doctor
  expertAssistantClinicStaffId: ID
  expertAssistantClinicStaff: ClinicStaff

  """医生：诊所诊疗费（挂号费）"""
  reservationFee: Float
  clinicDepartmentId: ID

  """科室"""
  clinicDepartment: ClinicDepartment
  nurseId: ID
  nurse: Nurse
  clinicWechatUserId: ID

  """微信号"""
  clinicWechatUser: ClinicWechatUser

  """诊所执业权限"""
  jobPermission: String

  """是否为专家特助 1：是 0：否"""
  expertAssistant: Float
  createdAt: Date
  updatedAt: Date

  """年龄"""
  age: Int

  """当前诊所代开方医生"""
  insteadDoctors: [Doctor]

  """当前用户的菜单权限"""
  permissions(
    """平台：后端、前端"""
    platform: ClinicStaffPermissionsPlatform!
  ): [String]

  """当前用户拥有的权限角色"""
  clinicRoleNames: [String]
  schedules(scheduleDate: Date, scheduleEndDate: Date): ClinicStaffSchedules
  subscribedCount: Float
  isSubscribed: Subscribe
}

"""A connection to a list of items."""
type ClinicStaffConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicStaffEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicStaffEdge {
  """The item at the end of the edge"""
  node: ClinicStaff

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicStaff"""
scalar ClinicStaffId

enum ClinicStaffPermissionsPlatform {
  Backend
  Frontend
}

type ClinicStaffSchedules {
  count: Int
  data: [Json]
}

input ClinicStaffsConditionInput {
  """省编号2位+市编号2位+人员唯一ID 6位 共10位数字"""
  userCode: String
  realName: String
  jobPositionId: JobPositionNameId
  jobTypeId: JobTypeNameId
  gender: Int
  birthday: DateConditionInput
  email: String
  idCardNumber: String
  cityId: CityId
  provinceId: ProvinceId
  clinicUserId: ClinicUserId
  avatarImageId: ImageId
  clinicId: ClinicId

  """是否默认诊所"""
  isDefault: Boolean
  isClinicAdmin: Boolean

  """有效标识"""
  enabled: Boolean

  """账号是否停用，默认启用"""
  isBlocked: Boolean
  doctorId: DoctorId
  insteadDoctorId: DoctorId
  expertAssistantClinicStaffId: ClinicStaffId

  """医生：诊所诊疗费（挂号费）"""
  reservationFee: Float

  """科室"""
  clinicDepartmentId: ClinicDepartmentId
  nurseId: NurseId

  """微信号"""
  clinicWechatUserId: ClinicWechatUserId

  """诊所执业权限"""
  jobPermission: String

  """是否为专家特助 1：是 0：否"""
  expertAssistant: Float
}

input ClinicStaffsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicStaffsOptionsInput {
  where: Json
  group: String
}

input ClinicStaffsSortInput {
  field: String
  order: SortOrder
}

"""诊所用户"""
type ClinicUser implements Node {
  id: ID!
  username: String
  passwordHash: String!
  realName: String
  isBlocked: Boolean
  phoneNumber: String!
  email: String
  idCardNumber: String
  gender: Float
  createdAt: Date
  updatedAt: Date
  currentClinicRoles(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    clinicId: ClinicId
  ): ClinicRoleConnection

  """前端权限（去重）"""
  frontendClinicRoleNames: [String]
  clinicStaffs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicStaffConnection
  clinicRoles(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicRoleConnection
  clinicUserStudies(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicUserStudyConnection
  clinicUserConfig: ClinicUserConfig
}

"""医生配置表"""
type ClinicUserConfig implements Node {
  id: ID!
  clinicUserId: ID
  clinicUser: ClinicUser!
  value: Json
  createdAt: Date
  updatedAt: Date
}

"""Global id of ClinicUserConfig"""
scalar ClinicUserConfigId

"""A connection to a list of items."""
type ClinicUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicUserEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicUserEdge {
  """The item at the end of the edge"""
  node: ClinicUser

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicUser"""
scalar ClinicUserId

"""用户功能权限"""
type ClinicUserPermission implements Node {
  id: ID!
  clinicRoleId: ID

  """用户角色"""
  clinicRole: ClinicRole!

  """前端权限：功能权限编码"""
  actionPermission: String
  clinicPermissionId: ID

  """诊所权限：诊所"""
  clinicPermission: Clinic
  provincePermissionId: ID

  """区域权限：省"""
  provincePermission: Province
  cityPermissionId: ID

  """区域权限：市"""
  cityPermission: City
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicUserPermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicUserPermissionEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicUserPermissionEdge {
  """The item at the end of the edge"""
  node: ClinicUserPermission

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicUserPermission"""
scalar ClinicUserPermissionId

input ClinicUserPermissionsConditionInput {
  """用户角色"""
  clinicRoleId: ClinicRoleId

  """前端权限：功能权限编码"""
  actionPermission: String

  """诊所权限：诊所"""
  clinicPermissionId: ClinicId

  """区域权限：省"""
  provincePermissionId: ProvinceId

  """区域权限：市"""
  cityPermissionId: CityId
}

input ClinicUserPermissionsKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicUserPermissionsOptionsInput {
  where: Json
  group: String
}

input ClinicUserPermissionsSortInput {
  field: String
  order: SortOrder
}

type ClinicUserRole implements Node {
  id: ID!
  role: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicUserRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicUserRoleEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicUserRoleEdge {
  """The item at the end of the edge"""
  node: ClinicUserRole

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicUserRole"""
scalar ClinicUserRoleId

input ClinicUserRolesConditionInput {
  role: String
}

input ClinicUserRolesKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicUserRolesOptionsInput {
  where: Json
  group: String
}

input ClinicUserRolesSortInput {
  field: String
  order: SortOrder
}

input ClinicUsersConditionInput {
  username: String
  passwordHash: String
  realName: String
  isBlocked: Boolean
  phoneNumber: String
  email: String
  idCardNumber: String
  gender: Float
}

"""诊所用户"""
type ClinicUserSession implements Node {
  id: ID!
  clinicUserId: ID
  clinicUser: ClinicUser!
  clinicId: ID
  clinic: Clinic
  accessToken: String!
  lastActiveAt: Date
  createdAt: Date
  updatedAt: Date
}

"""An edge in a connection."""
type ClinicUserSessionEdge {
  """The item at the end of the edge"""
  node: ClinicUserSession

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicUserSession"""
scalar ClinicUserSessionId

input ClinicUsersKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicUsersOptionsInput {
  where: Json
  group: String
}

input ClinicUsersSortInput {
  field: String
  order: SortOrder
}

"""诊所用户学习记录"""
type ClinicUserStudy implements Node {
  id: ID!
  clinicUserId: ID
  clinicUser: ClinicUser!

  """课程事件类型"""
  lessonKey: String!

  """课程名称"""
  lessonName: String!

  """
  课程类型(Clinic: "诊所站", Pharmacy: "药房站", Nurse: "护士站", Collect: "收银站", Doctor: "医生站")
  """
  lessonType: ClinicUserStudyLessonType!
  star: Int!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicUserStudyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicUserStudyEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicUserStudyEdge {
  """The item at the end of the edge"""
  node: ClinicUserStudy

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicUserStudy"""
scalar ClinicUserStudyId

enum ClinicUserStudyLessonType {
  Clinic
  Pharmacy
  Nurse
  Collect
  Doctor
}

input ClinicUserStudysConditionInput {
  clinicUserId: ClinicUserId

  """课程事件类型"""
  lessonKey: String

  """课程名称"""
  lessonName: String

  """
  课程类型(Clinic: "诊所站", Pharmacy: "药房站", Nurse: "护士站", Collect: "收银站", Doctor: "医生站")
  """
  lessonType: ClinicUserStudysConditionLessonType
  star: Int
}

enum ClinicUserStudysConditionLessonType {
  Clinic
  Pharmacy
  Nurse
  Collect
  Doctor
}

input ClinicUserStudysKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicUserStudysOptionsInput {
  where: Json
  group: String
}

input ClinicUserStudysSortInput {
  field: String
  order: SortOrder
}

"""微信用户信息（后台微信登录）"""
type ClinicWechatUser implements Node {
  id: ID!
  openid: String!
  nickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float
  province: String
  city: String

  """国家，如中国为CN"""
  country: String
  headImgUrl: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ClinicWechatUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClinicWechatUserEdge]
  count: Float
}

"""An edge in a connection."""
type ClinicWechatUserEdge {
  """The item at the end of the edge"""
  node: ClinicWechatUser

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ClinicWechatUser"""
scalar ClinicWechatUserId

input ClinicWechatUsersConditionInput {
  openid: String
  nickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float
  province: String
  city: String

  """国家，如中国为CN"""
  country: String
  headImgUrl: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String
}

input ClinicWechatUsersKeywordsInput {
  fields: [String]!
  value: String!
}

input ClinicWechatUsersOptionsInput {
  where: Json
  group: String
}

input ClinicWechatUsersSortInput {
  field: String
  order: SortOrder
}

type ClinicZhyfConfig {
  """取药方式"""
  getMethod: [String]

  """支付方式"""
  payType: [String]

  """运费"""
  expressFee: String
}

"""公司"""
type Company implements Node {
  id: ID!

  """公司名"""
  name: String

  """公司编码"""
  code: String
  areaId: ID

  """所属大区"""
  area: Area
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]
  count: Float
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge"""
  node: Company

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Company"""
scalar CompanyId

input CompanysConditionInput {
  """公司名"""
  name: String

  """公司编码"""
  code: String

  """所属大区"""
  areaId: AreaId
}

input CompanysKeywordsInput {
  fields: [String]!
  value: String!
}

input CompanysOptionsInput {
  where: Json
  group: String
}

input CompanysSortInput {
  field: String
  order: SortOrder
}

type Config implements Node {
  id: ID!
  key: String

  """JSON格式字符串,key值为驼峰命名方式"""
  value: String!
  title: String
  description: String
  readOnly: Boolean

  """是否需要默认设置"""
  isSetDefault: Boolean
  createdAt: Date
  updatedAt: Date
  parseValue: Json
}

"""A connection to a list of items."""
type ConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigEdge]
  count: Float
}

"""An edge in a connection."""
type ConfigEdge {
  """The item at the end of the edge"""
  node: Config

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Config"""
scalar ConfigId

input ConfigsConditionInput {
  key: String

  """JSON格式字符串,key值为驼峰命名方式"""
  value: String
  title: String
  description: String
  readOnly: Boolean

  """是否需要默认设置"""
  isSetDefault: Boolean
}

input ConfigsKeywordsInput {
  fields: [String]!
  value: String!
}

input ConfigsOptionsInput {
  where: Json
  group: String
}

input ConfigsSortInput {
  field: String
  order: SortOrder
}

"""消息模板"""
type ContactMsg implements Node {
  id: ID!

  """模板标题"""
  title: String!

  """模板说明（触发规则）"""
  description: String!

  """消息key"""
  key: ContactMsgKey!

  """触达范围。PATIENTS：全部患者；CLINICS：诊所"""
  target: ContactMsgTarget!

  """短信模板，json对象，data：消息内容；priority：优先级，0-4，值越高优先级越高。0：不启用；"""
  sms: Json

  """
  微信模板，同短信，data里面再分级。{templateId：模板id；url：跳转链接；data：[{name, key, value}]}
  """
  wechat: Json

  """邮件模板，同短信。data里面再分级 {title, content}"""
  email: Json

  """模板状态：NORMAL：正常；BLOCKED：已停用"""
  status: ContactMsgStatus
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ContactMsgConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContactMsgEdge]
  count: Float
}

"""An edge in a connection."""
type ContactMsgEdge {
  """The item at the end of the edge"""
  node: ContactMsg

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ContactMsg"""
scalar ContactMsgId

enum ContactMsgKey {
  ORDER_OFFLINE
  ORDER_ONLINE
  ORDER_IN_SITE
  PATIENT_DAY
  PATIENT_TODAY
  MEDICINE_EXPIRING
  MEDICINE_EXPIRED
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

"""待发送短信队列"""
type ContactMsgQueue implements Node {
  id: ID!

  """诊所id"""
  clinicId: Float

  """对象id"""
  originId: Float!

  """消息队列"""
  type: ContactMsgQueueType

  """消息队列状态"""
  status: ContactMsgQueueStatus
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ContactMsgQueueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContactMsgQueueEdge]
  count: Float
}

"""An edge in a connection."""
type ContactMsgQueueEdge {
  """The item at the end of the edge"""
  node: ContactMsgQueue

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ContactMsgQueue"""
scalar ContactMsgQueueId

input ContactMsgQueuesConditionInput {
  """诊所id"""
  clinicId: Float

  """对象id"""
  originId: Float

  """消息队列"""
  type: ContactMsgQueuesConditionType

  """消息队列状态"""
  status: ContactMsgQueuesConditionStatus
}

enum ContactMsgQueuesConditionStatus {
  waiting
  send
  finished
}

enum ContactMsgQueuesConditionType {
  MEDICINE_EXPIRING
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

input ContactMsgQueuesKeywordsInput {
  fields: [String]!
  value: String!
}

input ContactMsgQueuesOptionsInput {
  where: Json
  group: String
}

input ContactMsgQueuesSortInput {
  field: String
  order: SortOrder
}

enum ContactMsgQueueStatus {
  waiting
  send
  finished
}

enum ContactMsgQueueType {
  MEDICINE_EXPIRING
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

input ContactMsgsConditionInput {
  """模板标题"""
  title: String

  """模板说明（触发规则）"""
  description: String

  """消息key"""
  key: ContactMsgsConditionKey

  """触达范围。PATIENTS：全部患者；CLINICS：诊所"""
  target: ContactMsgsConditionTarget

  """短信模板，json对象，data：消息内容；priority：优先级，0-4，值越高优先级越高。0：不启用；"""
  sms: Json

  """
  微信模板，同短信，data里面再分级。{templateId：模板id；url：跳转链接；data：[{name, key, value}]}
  """
  wechat: Json

  """邮件模板，同短信。data里面再分级 {title, content}"""
  email: Json

  """模板状态：NORMAL：正常；BLOCKED：已停用"""
  status: ContactMsgsConditionStatus
}

enum ContactMsgsConditionKey {
  ORDER_OFFLINE
  ORDER_ONLINE
  ORDER_IN_SITE
  PATIENT_DAY
  PATIENT_TODAY
  MEDICINE_EXPIRING
  MEDICINE_EXPIRED
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

enum ContactMsgsConditionStatus {
  NORMAL
  BLOCKED
}

enum ContactMsgsConditionTarget {
  PATIENTS
  CLINICS
}

input ContactMsgsKeywordsInput {
  fields: [String]!
  value: String!
}

input ContactMsgsOptionsInput {
  where: Json
  group: String
}

input ContactMsgsSortInput {
  field: String
  order: SortOrder
}

enum ContactMsgStatus {
  NORMAL
  BLOCKED
}

enum ContactMsgTarget {
  PATIENTS
  CLINICS
}

input CreateTmpQrCodeInput {
  """有效期"""
  expiredAt: Date!

  """二维码标识，用于识别二维码事件"""
  sceneType: String!

  """有效时间，秒"""
  expireSecond: Float!

  """ 默认值:true"""
  isDelTmpImage: Boolean = true
  clientMutationId: String!
}

type CreateTmpQrCodePayload {
  wechatTmpQrCode: WechatTmpQrCode
  clientMutationId: String!
}

input CreateUserClinicsInput {
  clinicId: ClinicId!
  enabled: Boolean!
  isBlocked: Boolean!
  jobTypeId: JobTypeNameId
  clinicDepartmentId: ClinicDepartmentId
  reservationFee: Float
  insteadDoctorId: DoctorId

  """专家特助"""
  expertAssistantClinicStaffId: ClinicStaffId
}

enum CreateUserDoctorType {
  clinicFullTime
  clinicExpert
  alu
  hierarchicalDiagnosis
  livzonCustomer
  externalDoctor
}

input CreateUserInput {
  phoneNumber: String!
  password: String!
  jobPositionId: JobPositionNameId!
  nurseId: NurseId
  doctorId: DoctorId
  realName: String!
  gender: Int
  birthday: Date
  email: String
  idCardNumber: String

  """系统身份：诊所全职医生，诊所坐诊专家，阿鹿医生，分级诊疗医生，丽珠医生客户,诊所院外专家"""
  doctorType: CreateUserDoctorType
  cityId: CityId!
  provinceId: ProvinceId!
  clinicWechatUserId: ClinicWechatUserId
  hospitals: [HospitalId]
  clinics: [CreateUserClinicsInput]
  isBound: Boolean
  clientMutationId: String!
}

type CreateUserPayload {
  clinicUser: ClinicUser
  clientMutationId: String!
}

scalar Date

input DateConditionInput {
  """大于或等于"""
  gte: Date

  """小于或等于"""
  lte: Date

  """大于"""
  gt: Date

  """小于"""
  lt: Date

  """不等于"""
  ne: Date

  """等于"""
  eq: Date
}

input DeleteAliOssInput {
  id: AliOssId!
  clientMutationId: String!
}

type DeleteAliOssPayload {
  ok: Boolean
  deletedAliOss: AliOss
  deletedAliOssId: ID
  clientMutationId: String!
}

input DeleteClinicFileInput {
  clinicFileId: ClinicFileId
  clientMutationId: String!
}

type DeleteClinicFilePayload {
  deletedClinicFile: ClinicFile
  deletedClinicFileId: ID
  ok: Boolean
  clientMutationId: String!
}

input DeleteClinicIndexInput {
  id: ClinicIndexId!
  clientMutationId: String!
}

type DeleteClinicIndexPayload {
  ok: Boolean
  deletedClinicIndex: ClinicIndex
  deletedClinicIndexId: ID
  clientMutationId: String!
}

input DeleteClinicMemberTypeInput {
  id: ClinicMemberTypeId!
  clientMutationId: String!
}

type DeleteClinicMemberTypePayload {
  ok: Boolean
  deletedClinicMemberType: ClinicMemberType
  deletedClinicMemberTypeId: ID
  clientMutationId: String!
}

input DeleteClinicUserInput {
  id: ClinicUserId!
  clientMutationId: String!
}

type DeleteClinicUserPayload {
  ok: Boolean
  deletedClinicUser: ClinicUser
  deletedClinicUserId: ID
  clientMutationId: String!
}

input DeleteClinicUserPermissionInput {
  id: ClinicUserPermissionId!
  clientMutationId: String!
}

type DeleteClinicUserPermissionPayload {
  ok: Boolean
  deletedClinicUserPermission: ClinicUserPermission
  deletedClinicUserPermissionId: ID
  clientMutationId: String!
}

input DeleteClinicUserRoleInput {
  id: ClinicUserRoleId!
  clientMutationId: String!
}

type DeleteClinicUserRolePayload {
  ok: Boolean
  deletedClinicUserRole: ClinicUserRole
  deletedClinicUserRoleId: ID
  clientMutationId: String!
}

input DeleteClinicUserSessionInput {
  id: ClinicUserSessionId!
  clientMutationId: String!
}

type DeleteClinicUserSessionPayload {
  ok: Boolean
  deletedClinicUserSession: ClinicUserSession
  deletedClinicUserSessionId: ID
  clientMutationId: String!
}

input DeleteContactMsgInput {
  id: ContactMsgId!
  clientMutationId: String!
}

type DeleteContactMsgPayload {
  ok: Boolean
  deletedContactMsg: ContactMsg
  deletedContactMsgId: ID
  clientMutationId: String!
}

input DeleteContactMsgQueueInput {
  id: ContactMsgQueueId!
  clientMutationId: String!
}

type DeleteContactMsgQueuePayload {
  ok: Boolean
  deletedContactMsgQueue: ContactMsgQueue
  deletedContactMsgQueueId: ID
  clientMutationId: String!
}

input DeleteDoctorInput {
  doctorId: DoctorId!
  clientMutationId: String!
}

type DeleteDoctorPayload {
  changedDoctor: Doctor
  clientMutationId: String!
}

input DeleteExpressCompanyInput {
  id: ExpressCompanyId!
  clientMutationId: String!
}

type DeleteExpressCompanyPayload {
  ok: Boolean
  deletedExpressCompany: ExpressCompany
  deletedExpressCompanyId: ID
  clientMutationId: String!
}

input DeleteFileInput {
  id: FileId!
  clientMutationId: String!
}

type DeleteFilePayload {
  ok: Boolean
  deletedFile: File
  deletedFileId: ID
  clientMutationId: String!
}

input DeleteFunctionModuleConfigInput {
  id: FunctionModuleConfigId!
  clientMutationId: String!
}

type DeleteFunctionModuleConfigPayload {
  ok: Boolean
  deletedFunctionModuleConfig: FunctionModuleConfig
  deletedFunctionModuleConfigId: ID
  clientMutationId: String!
}

input DeleteHistoricalSearchsInput {
  clientMutationId: String!
}

type DeleteHistoricalSearchsPayload {
  changedUser: User
  clientMutationId: String!
}

input DeleteHospitalDepartmentInput {
  id: HospitalDepartmentId!
  clientMutationId: String!
}

type DeleteHospitalDepartmentPayload {
  ok: Boolean
  deletedHospitalDepartment: HospitalDepartment
  deletedHospitalDepartmentId: ID
  clientMutationId: String!
}

input DeleteHospitalInput {
  hospitalId: HospitalId!
  clientMutationId: String!
}

type DeleteHospitalPayload {
  changedHospital: Hospital
  clientMutationId: String!
}

input DeleteImageInput {
  id: ImageId!
  clientMutationId: String!
}

type DeleteImagePayload {
  ok: Boolean
  deletedImage: Image
  deletedImageId: ID
  clientMutationId: String!
}

input DeleteNurseInput {
  nurseId: NurseId!
  clientMutationId: String!
}

type DeleteNursePayload {
  changedNurse: Nurse
  clientMutationId: String!
}

input DeleteSearchInput {
  id: SearchId!
  clientMutationId: String!
}

type DeleteSearchPayload {
  ok: Boolean
  deletedSearch: Search
  deletedSearchId: ID
  clientMutationId: String!
}

input DeleteUserBackendPermissionsInput {
  clinicRoleId: ClinicRoleId!
  clientMutationId: String!
}

type DeleteUserBackendPermissionsPayload {
  ok: Boolean
  clientMutationId: String!
}

input DeleteUserClinicInput {
  clinicStaffId: ClinicStaffId!
  clientMutationId: String!
}

type DeleteUserClinicPayload {
  changedClinicStaff: ClinicStaff
  clientMutationId: String!
}

input DeleteUserPatientInput {
  userPatientId: UserPatientId!
  clientMutationId: String!
}

type DeleteUserPatientPayload {
  changedUserPatient: UserPatient
  clientMutationId: String!
}

type Department implements Node {
  id: ID!
  name: String!
  departmentTypeId: ID

  """科室类型"""
  departmentType: DepartmentTypeName!
  enabled: Boolean
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type DepartmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentEdge]
  count: Float
}

"""An edge in a connection."""
type DepartmentEdge {
  """The item at the end of the edge"""
  node: Department

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Department"""
scalar DepartmentId

input DepartmentsConditionInput {
  name: String

  """科室类型"""
  departmentTypeId: DepartmentTypeNameId
  enabled: Boolean
}

input DepartmentsKeywordsInput {
  fields: [String]!
  value: String!
}

input DepartmentsOptionsInput {
  where: Json
  group: String
}

input DepartmentsSortInput {
  field: String
  order: SortOrder
}

type DepartmentTypeName implements Node {
  id: ID!
  name: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type DepartmentTypeNameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentTypeNameEdge]
  count: Float
}

"""An edge in a connection."""
type DepartmentTypeNameEdge {
  """The item at the end of the edge"""
  node: DepartmentTypeName

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of DepartmentTypeName"""
scalar DepartmentTypeNameId

input DepartmentTypeNamesConditionInput {
  name: String
}

input DepartmentTypeNamesKeywordsInput {
  fields: [String]!
  value: String!
}

input DepartmentTypeNamesOptionsInput {
  where: Json
  group: String
}

input DepartmentTypeNamesSortInput {
  field: String
  order: SortOrder
}

"""区"""
type District implements Node {
  id: ID!

  """区名"""
  name: String

  """编码"""
  code: String
  cityId: ID

  """所属市"""
  city: City!

  """邮编"""
  postCode: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type DistrictConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DistrictEdge]
  count: Float
}

"""An edge in a connection."""
type DistrictEdge {
  """The item at the end of the edge"""
  node: District

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of District"""
scalar DistrictId

input DistrictsConditionInput {
  """区名"""
  name: String

  """编码"""
  code: String

  """所属市"""
  cityId: CityId

  """邮编"""
  postCode: String
}

input DistrictsKeywordsInput {
  fields: [String]!
  value: String!
}

input DistrictsOptionsInput {
  where: Json
  group: String
}

input DistrictsSortInput {
  field: String
  order: SortOrder
}

"""医生总库，存放主要信息：基础资料，个人信息(头像、个人公众号)，职业信息（个人简介）"""
type Doctor implements Node {
  id: ID!

  """用户编码"""
  userCode: String

  """手机号"""
  phoneNumber: String!

  """密码"""
  password: String

  """真实姓名"""
  realName: String!

  """是否可用"""
  enabled: Boolean

  """性别。"""
  gender: Int

  """系统身份：诊所全职医生，诊所坐诊专家，阿鹿医生，分级诊疗医生，丽珠医生客户,诊所院外专家"""
  doctorType: DoctorDoctorType!

  """出生日期"""
  birthday: Date

  """身份证号"""
  idCardNumber: String

  """执业医师资格证"""
  qualification: String
  cityId: ID

  """所在市"""
  city: City
  provinceId: ID

  """所在省"""
  province: Province

  """邮箱"""
  email: String
  departmentId: ID

  """科室"""
  department: Department

  """擅长疾病标签，多个以逗号隔开；后期考虑新增标签表维护"""
  expertiseTag: String

  """擅长领域"""
  expertise: String
  avatarImageId: ID

  """头像"""
  avatarImage: Image

  """个人公众号"""
  publicNumber: String

  """个人简介"""
  introduce: String

  """是否绑定账号"""
  isBound: Boolean
  clinicWechatUserId: ID

  """微信号"""
  clinicWechatUser: ClinicWechatUser
  createdAt: Date
  updatedAt: Date

  """年龄"""
  age: Int

  """擅长疾病标签列表"""
  expertiseTags: [String]

  """系统身份名称"""
  doctorTypeName: String

  """所在医院"""
  hospitals: [Hospital]

  """可绑定账号"""
  boundUser: ClinicUser
  clinicStaffs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicStaffConnection
  doctorHospitalRels(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): DoctorHospitalRelConnection
  doctorInfo: DoctorInfo
}

input DoctorBindUserInput {
  """医生id"""
  doctorId: DoctorId!

  """诊所用户id"""
  clinicUserId: ClinicUserId!
  clientMutationId: String!
}

type DoctorBindUserPayload {
  changedDoctor: Doctor
  clientMutationId: String!
}

"""A connection to a list of items."""
type DoctorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DoctorEdge]
  count: Float
}

enum DoctorDoctorType {
  clinicFullTime
  clinicExpert
  alu
  hierarchicalDiagnosis
  livzonCustomer
  externalDoctor
}

"""An edge in a connection."""
type DoctorEdge {
  """The item at the end of the edge"""
  node: Doctor

  """A cursor for use in pagination"""
  cursor: String!
}

"""医生与医院关系"""
type DoctorHospitalRel implements Node {
  id: ID!
  doctorId: ID
  doctor: Doctor!
  hospitalId: ID
  hospital: Hospital!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type DoctorHospitalRelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DoctorHospitalRelEdge]
  count: Float
}

"""An edge in a connection."""
type DoctorHospitalRelEdge {
  """The item at the end of the edge"""
  node: DoctorHospitalRel

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of DoctorHospitalRel"""
scalar DoctorHospitalRelId

input DoctorHospitalRelsConditionInput {
  doctorId: DoctorId
  hospitalId: HospitalId
}

input DoctorHospitalRelsKeywordsInput {
  fields: [String]!
  value: String!
}

input DoctorHospitalRelsOptionsInput {
  where: Json
  group: String
}

input DoctorHospitalRelsSortInput {
  field: String
  order: SortOrder
}

"""Global id of Doctor"""
scalar DoctorId

"""
医生信息从表，存放次要字段：个人信息（除头像、个人公众号外），职业信息（除个人简介外），学术研究信息，企业相关，社会信息，教育教学信息，家庭资产信息
"""
type DoctorInfo implements Node {
  id: ID!
  doctorId: ID
  doctor: Doctor!

  """现居住地"""
  currentAddress: String

  """家乡"""
  hometown: String

  """民族"""
  nation: String

  """身份证地址"""
  idCardAddress: String

  """户口所在地"""
  registeredResidence: String

  """QQ"""
  qqNumber: Float

  """微博"""
  microblog: String

  """行业"""
  industry: String

  """临床职务"""
  clinicalDuties: String

  """行政职务"""
  administrativePost: String

  """履历信息"""
  recordInfo: String

  """执业证书"""
  practisingCertificate: String

  """执业地点"""
  practicePlace: String

  """执业范围"""
  practiceScope: String

  """执业类别"""
  practiceCategory: String

  """发证机关"""
  issuingAuthority: String

  """协会信息"""
  associationInfo: String

  """职称"""
  jobTitle: String

  """研究方向"""
  researchDirection: String

  """曾参与课题"""
  topics: String

  """论文"""
  paper: String

  """对企业认可度"""
  enterpriseRecognition: String

  """对企业诉求"""
  enterpriseDemands: String

  """参与活动"""
  activities: String

  """KOL"""
  kol: String

  """处方药品"""
  ethicals: String

  """兴趣爱好"""
  interests: String

  """社交协会"""
  socialAssociation: String

  """海外经历"""
  overseasExperience: String

  """饮食偏好"""
  foodPreference: String

  """是否清真"""
  isHalal: String

  """信仰"""
  belief: String

  """荣誉"""
  honor: String

  """关系网"""
  relationNetwork: String

  """高中"""
  highSchool: String

  """大学"""
  university: String

  """研究生"""
  postgraduate: String

  """博士"""
  doctorInfo: String

  """国内进修"""
  domesticStudy: String

  """国外进修"""
  abroadStudy: String

  """院校"""
  academy: String

  """教学职称"""
  teachingJobTitle: String

  """父亲"""
  father: String

  """母亲"""
  mother: String

  """配偶"""
  mate: String

  """子女"""
  children: String

  """房"""
  house: String

  """车"""
  vehicle: String

  """参股公司"""
  jointStockCompany: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type DoctorInfoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DoctorInfoEdge]
  count: Float
}

"""An edge in a connection."""
type DoctorInfoEdge {
  """The item at the end of the edge"""
  node: DoctorInfo

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of DoctorInfo"""
scalar DoctorInfoId

input DoctorInfosConditionInput {
  doctorId: DoctorId

  """现居住地"""
  currentAddress: String

  """家乡"""
  hometown: String

  """民族"""
  nation: String

  """身份证地址"""
  idCardAddress: String

  """户口所在地"""
  registeredResidence: String

  """QQ"""
  qqNumber: Float

  """微博"""
  microblog: String

  """行业"""
  industry: String

  """临床职务"""
  clinicalDuties: String

  """行政职务"""
  administrativePost: String

  """履历信息"""
  recordInfo: String

  """执业证书"""
  practisingCertificate: String

  """执业地点"""
  practicePlace: String

  """执业范围"""
  practiceScope: String

  """执业类别"""
  practiceCategory: String

  """发证机关"""
  issuingAuthority: String

  """协会信息"""
  associationInfo: String

  """职称"""
  jobTitle: String

  """研究方向"""
  researchDirection: String

  """曾参与课题"""
  topics: String

  """论文"""
  paper: String

  """对企业认可度"""
  enterpriseRecognition: String

  """对企业诉求"""
  enterpriseDemands: String

  """参与活动"""
  activities: String

  """KOL"""
  kol: String

  """处方药品"""
  ethicals: String

  """兴趣爱好"""
  interests: String

  """社交协会"""
  socialAssociation: String

  """海外经历"""
  overseasExperience: String

  """饮食偏好"""
  foodPreference: String

  """是否清真"""
  isHalal: String

  """信仰"""
  belief: String

  """荣誉"""
  honor: String

  """关系网"""
  relationNetwork: String

  """高中"""
  highSchool: String

  """大学"""
  university: String

  """研究生"""
  postgraduate: String

  """博士"""
  doctorInfo: String

  """国内进修"""
  domesticStudy: String

  """国外进修"""
  abroadStudy: String

  """院校"""
  academy: String

  """教学职称"""
  teachingJobTitle: String

  """父亲"""
  father: String

  """母亲"""
  mother: String

  """配偶"""
  mate: String

  """子女"""
  children: String

  """房"""
  house: String

  """车"""
  vehicle: String

  """参股公司"""
  jointStockCompany: String
}

input DoctorInfosKeywordsInput {
  fields: [String]!
  value: String!
}

input DoctorInfosOptionsInput {
  where: Json
  group: String
}

input DoctorInfosSortInput {
  field: String
  order: SortOrder
}

enum DoctorsConditionDoctorType {
  clinicFullTime
  clinicExpert
  alu
  hierarchicalDiagnosis
  livzonCustomer
  externalDoctor
}

input DoctorsConditionInput {
  """用户编码"""
  userCode: String

  """手机号"""
  phoneNumber: String

  """密码"""
  password: String

  """真实姓名"""
  realName: String

  """是否可用"""
  enabled: Boolean

  """性别。"""
  gender: Int

  """系统身份：诊所全职医生，诊所坐诊专家，阿鹿医生，分级诊疗医生，丽珠医生客户,诊所院外专家"""
  doctorType: DoctorsConditionDoctorType
  birthday: DateConditionInput

  """身份证号"""
  idCardNumber: String

  """执业医师资格证"""
  qualification: String

  """所在市"""
  cityId: CityId

  """所在省"""
  provinceId: ProvinceId

  """邮箱"""
  email: String

  """科室"""
  departmentId: DepartmentId

  """擅长疾病标签，多个以逗号隔开；后期考虑新增标签表维护"""
  expertiseTag: String

  """擅长领域"""
  expertise: String

  """头像"""
  avatarImageId: ImageId

  """个人公众号"""
  publicNumber: String

  """个人简介"""
  introduce: String

  """是否绑定账号"""
  isBound: Boolean

  """微信号"""
  clinicWechatUserId: ClinicWechatUserId
}

input DoctorsKeywordsInput {
  fields: [String]!
  value: String!
}

input DoctorsOptionsInput {
  where: Json
  group: String
}

input DoctorsSortInput {
  field: String
  order: SortOrder
}

type DoctorTypePayload {
  code: String
  name: String
}

type DoctorTypesPayload {
  code: String
  name: String
}

input DoctorUnbindUserInput {
  doctorId: DoctorId!
  clientMutationId: String!
}

type DoctorUnbindUserPayload {
  changedDoctor: Doctor
  clientMutationId: String!
}

"""邮件记录"""
type EmailLog implements Node {
  id: ID!

  """主题"""
  subject: String!

  """内容"""
  content: String

  """接收者"""
  toEmails: String!

  """发送者"""
  fromEmail: String!

  """内容是否是html"""
  isHtml: Boolean

  """是否有附件"""
  hasAttachments: Boolean

  """发送状态"""
  sendResult: Boolean

  """失败原因"""
  failureReason: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type EmailLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailLogEdge]
  count: Float
}

"""An edge in a connection."""
type EmailLogEdge {
  """The item at the end of the edge"""
  node: EmailLog

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of EmailLog"""
scalar EmailLogId

input EmailLogsConditionInput {
  """主题"""
  subject: String

  """内容"""
  content: String

  """接收者"""
  toEmails: String

  """发送者"""
  fromEmail: String

  """内容是否是html"""
  isHtml: Boolean

  """是否有附件"""
  hasAttachments: Boolean

  """发送状态"""
  sendResult: Boolean

  """失败原因"""
  failureReason: String
}

input EmailLogsKeywordsInput {
  fields: [String]!
  value: String!
}

input EmailLogsOptionsInput {
  where: Json
  group: String
}

input EmailLogsSortInput {
  field: String
  order: SortOrder
}

"""快递公司编码，快递100使用"""
type ExpressCompany implements Node {
  id: ID!

  """公司名字"""
  name: String!

  """公司编码"""
  code: String!

  """备注信息"""
  remark: String

  """国家英文"""
  en: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ExpressCompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpressCompanyEdge]
  count: Float
}

"""An edge in a connection."""
type ExpressCompanyEdge {
  """The item at the end of the edge"""
  node: ExpressCompany

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of ExpressCompany"""
scalar ExpressCompanyId

input ExpressCompanysConditionInput {
  """公司名字"""
  name: String

  """公司编码"""
  code: String

  """备注信息"""
  remark: String

  """国家英文"""
  en: String
}

input ExpressCompanysKeywordsInput {
  fields: [String]!
  value: String!
}

input ExpressCompanysOptionsInput {
  where: Json
  group: String
}

input ExpressCompanysSortInput {
  field: String
  order: SortOrder
}

type File implements Node {
  id: ID!
  name: String
  url: String
  size: Float
  contentType: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]
  count: Float
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge"""
  node: File

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of File"""
scalar FileId

input FilesConditionInput {
  name: String
  url: String
  size: Float
  contentType: String
}

input FilesKeywordsInput {
  fields: [String]!
  value: String!
}

input FilesOptionsInput {
  where: Json
  group: String
}

input FilesSortInput {
  field: String
  order: SortOrder
}

type FindClinicIdsFromConditionPayload {
  isSite: Boolean
  clinicIds: [ID]
}

type FindClinicIdsFromPermissionPayload {
  isSite: Boolean
  clinicIds: [ID]
}

type FindClinicIdsFromUserPayload {
  isSite: Boolean
  clinicIds: [ID]
}

type FindHasPermissionAreaAndClinicsPayload {
  id: ID
  name: String
  cities: [FindHasPermissionAreaAndClinicsPayloadCities]
}

type FindHasPermissionAreaAndClinicsPayloadCities {
  id: ID
  name: String
  clinics: [Clinic]
}

type FindHasPermissionAreaPayload {
  id: ID
  name: String
  cities: [FindHasPermissionAreaPayloadCities]
}

type FindHasPermissionAreaPayloadCities {
  id: ID
  name: String
}

type FindUserPermissionsPayload {
  clinicRoles: [ClinicRole]
}

enum FindUserPermissionsPermissionType {
  Frontend
  Backend
}

"""功能模块配置"""
type FunctionModuleConfig implements Node {
  id: ID!

  """名称"""
  name: String!

  """key，不可修改"""
  key: String!

  """默认值：是否开启"""
  defaultValue: Boolean!
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
}

"""A connection to a list of items."""
type FunctionModuleConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FunctionModuleConfigEdge]
  count: Float
}

"""An edge in a connection."""
type FunctionModuleConfigEdge {
  """The item at the end of the edge"""
  node: FunctionModuleConfig

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of FunctionModuleConfig"""
scalar FunctionModuleConfigId

input FunctionModuleConfigsConditionInput {
  """名称"""
  name: String

  """key，不可修改"""
  key: String

  """默认值：是否开启"""
  defaultValue: Boolean
}

input FunctionModuleConfigsKeywordsInput {
  fields: [String]!
  value: String!
}

input FunctionModuleConfigsOptionsInput {
  where: Json
  group: String
}

input FunctionModuleConfigsSortInput {
  field: String
  order: SortOrder
}

enum GenerateSerialNumberCategory {
  StockEntry
  StockTaking
  StockDelivery
  MaterialEntry
  MaterialDelivery
  MaterialTaking
  PrePaidCardHistory
  CheckOrder
  CheckBodyOrder
  TreatmentOrder
  InspectionOrder
  BillingRecord
  MedicalRecord
  OtherCharge
  ChinesePrescription
  Prescription
  ClinicalRecord
  BillingRecordSnapshot
}

type GetAliOssSignaturePayload {
  credentials: String
}

type GetClinicCountByProvincePayload {
  total: Float
  completeCount: Float
  pendingCount: Float
}

input GetClinicFunctionModuleConfigsConditionInput {
  """功能模块KEY"""
  key: String!
  keyword: String

  """诊所所在大区"""
  areaId: AreaId

  """诊所所在省份"""
  provinceId: ProvinceId

  """诊所所在城市"""
  cityId: CityId

  """停用、启用"""
  enabled: Boolean
}

type GetClinicQrCodePayload {
  wechatTmpQrCode: WechatTmpQrCode
}

input GetClinicsConditionsInput {
  name: String
  cityId: CityId
  provinceId: ProvinceId
  areaId: AreaId
  companyId: CompanyId
}

input GetClinicsSortInput {
  field: String
  order: GetClinicsSortOrder
}

enum GetClinicsSortOrder {
  ASC
  DESC
}

enum GetClinicUsersConditionsBackendRole {
  Admin
  Market
  Finance
  Personnel
  Boss
  Staff
}

enum GetClinicUsersConditionsFrontendRole {
  DoctorWorkstation
  NurseWorkstation
  PharmacyWorkstation
  CashierDesk
  ClinicWorkstation
}

input GetClinicUsersConditionsInput {
  keyword: String

  """角色"""
  jobPositionId: JobPositionNameId
  isBlocked: Boolean
  cityId: CityId
  provinceId: ProvinceId

  """前台权限"""
  frontendRole: GetClinicUsersConditionsFrontendRole

  """后台权限"""
  backendRole: GetClinicUsersConditionsBackendRole
}

input GetClinicUsersSortInput {
  field: String
  order: GetClinicUsersSortOrder
}

enum GetClinicUsersSortOrder {
  ASC
  DESC
}

input GetClinicWechatUserSortInput {
  field: String!
  order: GetClinicWechatUserSortOrder!
}

enum GetClinicWechatUserSortOrder {
  DESC
  ASC
}

enum GetContactMsgQueuesType {
  MEDICINE_EXPIRING
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

enum GetDoctorsConditionsDoctorType {
  clinicFullTime
  clinicExpert
  alu
  hierarchicalDiagnosis
  livzonCustomer
  externalDoctor
}

input GetDoctorsConditionsInput {
  keyword: String
  doctorType: GetDoctorsConditionsDoctorType
  provinceId: ProvinceId
  cityId: CityId

  """所在医院"""
  hospitalName: String

  """所在诊所"""
  clinicId: ClinicId

  """所在科室"""
  departmentId: DepartmentId

  """是否可用 默认值:true"""
  isEnabled: Boolean = true

  """已绑定，未绑定，未注册"""
  status: GetDoctorsConditionsStatus
}

enum GetDoctorsConditionsStatus {
  Bound
  Unbind
  Unregistered
}

input GetDoctorsSortInput {
  field: String
  order: GetDoctorsSortOrder
}

enum GetDoctorsSortOrder {
  ASC
  DESC
}

type GetExternalClinicsPayload {
  clinicIds: [String]
}

enum GetHospitalsConditionsHospitalType {
  Public
  Private
  Unknown
}

input GetHospitalsConditionsInput {
  keyword: String
  cityId: CityId
  provinceId: ProvinceId
  areaId: AreaId
  hospitalType: GetHospitalsConditionsHospitalType
  companyId: CompanyId
  levelId: LevelId
}

input GetHospitalsSortInput {
  field: String
  order: GetHospitalsSortOrder
}

enum GetHospitalsSortOrder {
  ASC
  DESC
}

type GetMaterialPayload {
  """素材信息，json字符串"""
  msg: String
}

type GetMaterialsPayload {
  """素材列表，json字符串"""
  msgs: String
}

enum GetMaterialsType {
  image
  video
  voice
  news
}

input GetNursesConditionsInput {
  keyword: String
  gender: Float
  cityId: CityId
  provinceId: ProvinceId
  clinicId: ClinicId

  """已绑定，未绑定，未注册"""
  status: GetNursesConditionsStatus
}

enum GetNursesConditionsStatus {
  Bound
  Unbind
  Unregistered
}

input GetNursesSortInput {
  field: String
  order: GetNursesSortOrder
}

enum GetNursesSortOrder {
  ASC
  DESC
}

type GetOrCreateUserPatientPayload {
  userPatient: UserPatient
}

type GetPatientDiscountPayload {
  checkDiscount: Float
  inspectionDiscount: Float
  treatmentDiscount: Float
  chinesePrescriptionDiscount: Float
  prescriptionDiscount: Float
  otherChargeDiscount: Float
  diagnosisChargeDiscount: Float
}

input GetPatientsSortInput {
  field: String
  order: GetPatientsSortOrder
}

enum GetPatientsSortOrder {
  DESC
  ASC
}

type GetRecentSubscribeAndCheckInCountPayload {
  data: GetRecentSubscribeAndCheckInCountPayloadData

  """返回码，0: 正常; -2: 医生没有微站"""
  errcode: Float

  """返回的错误信息"""
  errmsg: String
}

type GetRecentSubscribeAndCheckInCountPayloadData {
  """新增粉丝"""
  subscribeCount: Float

  """新增报到"""
  doctorCheckInCount: Float

  """待处理咨询"""
  consultCount: Float
}

input GetSetWechatConfigInput {
  key: String!
  value: String
  clientMutationId: String!
}

type GetSetWechatConfigPayload {
  wechatConfig: WechatConfig
  clientMutationId: String!
}

input GrantUserBackendPermissionsInput {
  clinicUserId: ClinicUserId!
  name: GrantUserBackendPermissionsName!

  """后台权限范围类型：全站、区域、诊所"""
  scopeType: GrantUserBackendPermissionsScopeType
  clinicPermissions: [ClinicId]
  provincePermissions: [ProvinceId]
  cityPermissions: [CityId]
  clientMutationId: String!
}

enum GrantUserBackendPermissionsName {
  Admin
  Market
  Finance
  Personnel
  Boss
  Staff
}

type GrantUserBackendPermissionsPayload {
  clinicRole: ClinicRole
  clientMutationId: String!
}

enum GrantUserBackendPermissionsScopeType {
  Site
  Area
  Clinic
}

input GrantUserFrontendPermissionsInput {
  clinicUserId: ClinicUserId!
  clinicId: ClinicId!
  isDefault: Boolean
  roles: [GrantUserFrontendPermissionsRolesInput]
  clientMutationId: String!
}

type GrantUserFrontendPermissionsPayload {
  clinicUser: ClinicUser
  clientMutationId: String!
}

input GrantUserFrontendPermissionsRolesInput {
  name: GrantUserFrontendPermissionsRolesName!
  actionPermissions: [String]
}

enum GrantUserFrontendPermissionsRolesName {
  DoctorWorkstation
  NurseWorkstation
  PharmacyWorkstation
  CashierDesk
  ClinicWorkstation
}

type Hospital implements Node {
  id: ID!
  name: String!
  code: String

  """别名，多个以逗号隔开；"""
  alias: String
  provinceId: ID
  province: Province!
  cityId: ID
  city: City!
  districtId: ID
  district: District
  areaId: ID

  """大区"""
  area: Area
  companyId: ID
  company: Company
  levelId: ID
  level: Level

  """Public:公立，Private:民营，Unknown：未知"""
  hospitalType: HospitalHospitalType
  enabled: Boolean
  deletedAt: Date
  createdAt: Date
  updatedAt: Date

  """擅长疾病标签列表 """
  aliasName: [String]
  hospitalDepartments(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): HospitalDepartmentConnection
}

"""A connection to a list of items."""
type HospitalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HospitalEdge]
  count: Float
}

type HospitalDepartment implements Node {
  id: ID!
  name: String!
  hospitalId: ID
  hospital: Hospital!
  deletedAt: Date
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type HospitalDepartmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HospitalDepartmentEdge]
  count: Float
}

"""An edge in a connection."""
type HospitalDepartmentEdge {
  """The item at the end of the edge"""
  node: HospitalDepartment

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of HospitalDepartment"""
scalar HospitalDepartmentId

input HospitalDepartmentsConditionInput {
  name: String
  hospitalId: HospitalId
  deletedAt: DateConditionInput
}

input HospitalDepartmentsKeywordsInput {
  fields: [String]!
  value: String!
}

input HospitalDepartmentsOptionsInput {
  where: Json
  group: String
}

input HospitalDepartmentsSortInput {
  field: String
  order: SortOrder
}

"""An edge in a connection."""
type HospitalEdge {
  """The item at the end of the edge"""
  node: Hospital

  """A cursor for use in pagination"""
  cursor: String!
}

enum HospitalHospitalType {
  Public
  Private
  Unknown
}

"""Global id of Hospital"""
scalar HospitalId

enum HospitalsConditionHospitalType {
  Public
  Private
  Unknown
}

input HospitalsConditionInput {
  name: String
  code: String

  """别名，多个以逗号隔开；"""
  alias: String
  provinceId: ProvinceId
  cityId: CityId
  districtId: DistrictId

  """大区"""
  areaId: AreaId
  companyId: CompanyId
  levelId: LevelId

  """Public:公立，Private:民营，Unknown：未知"""
  hospitalType: HospitalsConditionHospitalType
  enabled: Boolean
  deletedAt: DateConditionInput
}

input HospitalsKeywordsInput {
  fields: [String]!
  value: String!
}

input HospitalsOptionsInput {
  where: Json
  group: String
}

input HospitalsSortInput {
  field: String
  order: SortOrder
}

type Icd10Code implements Node {
  id: ID!
  name: String!
  code: String!
  pinyinCode: String!
  englishName: String
  parentId: ID
  parent: Icd10Code
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type Icd10CodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Icd10CodeEdge]
  count: Float
}

"""An edge in a connection."""
type Icd10CodeEdge {
  """The item at the end of the edge"""
  node: Icd10Code

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Icd10Code"""
scalar Icd10CodeId

input Icd10CodesConditionInput {
  name: String
  code: String
  pinyinCode: String
  englishName: String
  parentId: Icd10CodeId
}

input Icd10CodesKeywordsInput {
  fields: [String]!
  value: String!
}

input Icd10CodesOptionsInput {
  where: Json
  group: String
}

input Icd10CodesSortInput {
  field: String
  order: SortOrder
}

type Image implements Node {
  id: ID!
  url: String
  size: Float
  contentType: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]
  count: Float
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge"""
  node: Image

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Image"""
scalar ImageId

input ImagesConditionInput {
  url: String
  size: Float
  contentType: String
}

input ImagesKeywordsInput {
  fields: [String]!
  value: String!
}

input ImagesOptionsInput {
  where: Json
  group: String
}

input ImagesSortInput {
  field: String
  order: SortOrder
}

input InitClinicRolesInput {
  clientMutationId: String!
}

type InitClinicRolesPayload {
  success: String
  clientMutationId: String!
}

input InitPermissionsInput {
  clientMutationId: String!
}

type InitPermissionsPayload {
  success: String
  clientMutationId: String!
}

type JobPositionName implements Node {
  id: ID!
  name: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type JobPositionNameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobPositionNameEdge]
  count: Float
}

"""An edge in a connection."""
type JobPositionNameEdge {
  """The item at the end of the edge"""
  node: JobPositionName

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of JobPositionName"""
scalar JobPositionNameId

input JobPositionNamesConditionInput {
  name: String
}

input JobPositionNamesKeywordsInput {
  fields: [String]!
  value: String!
}

input JobPositionNamesOptionsInput {
  where: Json
  group: String
}

input JobPositionNamesSortInput {
  field: String
  order: SortOrder
}

type JobTypeName implements Node {
  id: ID!
  name: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type JobTypeNameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobTypeNameEdge]
  count: Float
}

"""An edge in a connection."""
type JobTypeNameEdge {
  """The item at the end of the edge"""
  node: JobTypeName

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of JobTypeName"""
scalar JobTypeNameId

input JobTypeNamesConditionInput {
  name: String
}

input JobTypeNamesKeywordsInput {
  fields: [String]!
  value: String!
}

input JobTypeNamesOptionsInput {
  where: Json
  group: String
}

input JobTypeNamesSortInput {
  field: String
  order: SortOrder
}

scalar Json

type Level implements Node {
  id: ID!
  name: String
  sort: Int
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type LevelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LevelEdge]
  count: Float
}

"""An edge in a connection."""
type LevelEdge {
  """The item at the end of the edge"""
  node: Level

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Level"""
scalar LevelId

input LevelsConditionInput {
  name: String
  sort: Int
}

input LevelsKeywordsInput {
  fields: [String]!
  value: String!
}

input LevelsOptionsInput {
  where: Json
  group: String
}

input LevelsSortInput {
  field: String
  order: SortOrder
}

type ListClinicDepartmentsPayload {
  values: [String]
}

enum ListClinicsSort {
  location
  reservation
}

enum ListSearchClinicsSort {
  location
  checkInTotal
}

input LoginClinicUserInput {
  username: String!
  password: String!
  clinicCode: String
  clientMutationId: String!
}

type LoginClinicUserPayload {
  clinicUserSession: ClinicUserSession
  clinicStaff: ClinicStaff
  clientMutationId: String!
}

input LoginUserBySmsInput {
  """平台：后端、前端、其他"""
  platform: LoginUserBySmsPlatform!
  phoneNumber: String!
  code: String!

  """ 默认值:86"""
  countryCode: String = "86"
  clientMutationId: String!
}

type LoginUserBySmsPayload {
  clinicUserSession: ClinicUserSession
  clinicStaff: ClinicStaff
  clientMutationId: String!
}

enum LoginUserBySmsPlatform {
  backend
  frontend
  other
}

input LoginUserInput {
  """平台：后端、前端、其他"""
  platform: LoginUserPlatform!
  phoneNumber: String!
  password: String!
  clientMutationId: String!
}

type LoginUserPayload {
  clinicUserSession: ClinicUserSession
  clinicStaff: ClinicStaff
  clientMutationId: String!
}

enum LoginUserPlatform {
  backend
  frontend
  other
}

input LogoutClinicUserInput {
  clientMutationId: String!
}

type LogoutClinicUserPayload {
  clientMutationId: String!
}

"""患者关联会员类型"""
type MapClinicMemberPatient implements Node {
  id: ID!
  patientId: ID

  """患者id"""
  patient: Patient!
  clinicMemberTypeId: ID

  """诊所会员类型"""
  clinicMemberType: ClinicMemberType!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type MapClinicMemberPatientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MapClinicMemberPatientEdge]
  count: Float
}

"""An edge in a connection."""
type MapClinicMemberPatientEdge {
  """The item at the end of the edge"""
  node: MapClinicMemberPatient

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of MapClinicMemberPatient"""
scalar MapClinicMemberPatientId

input MapClinicMemberPatientsConditionInput {
  """患者id"""
  patientId: PatientId

  """诊所会员类型"""
  clinicMemberTypeId: ClinicMemberTypeId
}

input MapClinicMemberPatientsKeywordsInput {
  fields: [String]!
  value: String!
}

input MapClinicMemberPatientsOptionsInput {
  where: Json
  group: String
}

input MapClinicMemberPatientsSortInput {
  field: String
  order: SortOrder
}

input MapClinicMemberToPatientInput {
  """患者id"""
  patientId: PatientId!

  """会员类型id"""
  clinicMemberTypeId: ClinicMemberTypeId!
  clientMutationId: String!
}

type MapClinicMemberToPatientPayload {
  patient: Patient
  clientMutationId: String!
}

input MemberDataIntroInput {
  clinicId: ClinicId!
  clientMutationId: String!
}

type MemberDataIntroPayload {
  repeatDatas: [MemberDataIntroRepeatDatasPayload]
  wrongDatas: [MemberDataIntroWrongDatasPayload]
  clientMutationId: String!
}

type MemberDataIntroRepeatDatasPayload {
  source: Patient
  replace: MemberDataIntroRepeatDatasPayloadReplace
}

type MemberDataIntroRepeatDatasPayloadReplace {
  realName: String!
  clinicMemberSerialNo: String
  clinicMemberType: ClinicMemberType
  phoneNumber: String
  gender: Int
  age: Int
}

type MemberDataIntroWrongDatasPayload {
  realName: String
  clinicMemberSerialNo: String
  clinicMemberType: String
  phoneNumber: String
  gender: String
  age: Int
  issueType: String
}

type Mutation {
  updateApplicationCenter(input: UpdateApplicationCenterInput!): UpdateApplicationCenterPayload
  addApplicationCenter(input: AddApplicationCenterInput!): AddApplicationCenterPayload
  addClinic(input: AddClinicInput!): AddClinicPayload
  setIsE01Clinic(input: SetIsE01ClinicInput!): SetIsE01ClinicPayload
  setIsReservation(input: SetIsReservationInput!): SetIsReservationPayload
  setServiceRole(input: SetServiceRoleInput!): SetServiceRolePayload
  addOrUpdateClinic(input: AddOrUpdateClinicInput!): AddOrUpdateClinicPayload
  updateClinic(input: UpdateClinicInput!): UpdateClinicPayload
  addOrUpdateClinicZhyfConfig(input: AddOrUpdateClinicZhyfConfigInput!): AddOrUpdateClinicZhyfConfigPayload
  addClinicConfig(input: AddClinicConfigInput!): AddClinicConfigPayload
  updateClinicConfig(input: UpdateClinicConfigInput!): UpdateClinicConfigPayload
  uploadClinicFile(input: UploadClinicFileInput!): UploadClinicFilePayload
  deleteClinicFile(input: DeleteClinicFileInput!): DeleteClinicFilePayload
  updateClinicFile(input: UpdateClinicFileInput!): UpdateClinicFilePayload
  addClinicFunctionModuleConfig(input: AddClinicFunctionModuleConfigInput!): AddClinicFunctionModuleConfigPayload
  updateClinicFunctionModuleConfig(input: UpdateClinicFunctionModuleConfigInput!): UpdateClinicFunctionModuleConfigPayload
  addClinicIndex(input: AddClinicIndexInput!): AddClinicIndexPayload
  updateClinicIndex(input: UpdateClinicIndexInput!): UpdateClinicIndexPayload
  deleteClinicIndex(input: DeleteClinicIndexInput!): DeleteClinicIndexPayload
  addClinicRecord(input: AddClinicRecordInput!): AddClinicRecordPayload
  updateClinicRecord(input: UpdateClinicRecordInput!): UpdateClinicRecordPayload
  addConfig(input: AddConfigInput!): AddConfigPayload
  updateConfig(input: UpdateConfigInput!): UpdateConfigPayload
  addFunctionModuleConfig(input: AddFunctionModuleConfigInput!): AddFunctionModuleConfigPayload
  updateFunctionModuleConfig(input: UpdateFunctionModuleConfigInput!): UpdateFunctionModuleConfigPayload
  deleteFunctionModuleConfig(input: DeleteFunctionModuleConfigInput!): DeleteFunctionModuleConfigPayload

  """增加搜索项"""
  addSearch(input: AddSearchInput!): AddSearchPayload

  """删除搜索记录"""
  deleteHistoricalSearchs(input: DeleteHistoricalSearchsInput!): DeleteHistoricalSearchsPayload
  deleteSearch(input: DeleteSearchInput!): DeleteSearchPayload
  addTask(input: AddTaskInput!): AddTaskPayload
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload
  addVersionHistory(input: AddVersionHistoryInput!): AddVersionHistoryPayload
  addClinicUser(input: AddClinicUserInput!): AddClinicUserPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  loginClinicUser(input: LoginClinicUserInput!): LoginClinicUserPayload
  loginUser(input: LoginUserInput!): LoginUserPayload
  loginUserBySms(input: LoginUserBySmsInput!): LoginUserBySmsPayload
  switchUserClinic(input: SwitchUserClinicInput!): SwitchUserClinicPayload
  logoutClinicUser(input: LogoutClinicUserInput!): LogoutClinicUserPayload
  updateClinicUser(input: UpdateClinicUserInput!): UpdateClinicUserPayload
  addAndUpdateClinicAdmin(input: AddAndUpdateClinicAdminInput!): AddAndUpdateClinicAdminPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
  deleteClinicUser(input: DeleteClinicUserInput!): DeleteClinicUserPayload
  addOrUpdateClinicUserConfig(input: AddOrUpdateClinicUserConfigInput!): AddOrUpdateClinicUserConfigPayload
  addClinicUserSession(input: AddClinicUserSessionInput!): AddClinicUserSessionPayload
  updateClinicUserSession(input: UpdateClinicUserSessionInput!): UpdateClinicUserSessionPayload
  deleteClinicUserSession(input: DeleteClinicUserSessionInput!): DeleteClinicUserSessionPayload
  addClinicUserStudy(input: AddClinicUserStudyInput!): AddClinicUserStudyPayload
  updateClinicUserStudy(input: UpdateClinicUserStudyInput!): UpdateClinicUserStudyPayload
  addClinicWechatUser(input: AddClinicWechatUserInput!): AddClinicWechatUserPayload
  updateClinicWechatUser(input: UpdateClinicWechatUserInput!): UpdateClinicWechatUserPayload
  bindUserPhone(input: BindUserPhoneInput!): BindUserPhonePayload

  """保存微信用户信息"""
  saveWeChatUser(input: SaveWeChatUserInput!): SaveWeChatUserPayload
  updateWechatUser(input: UpdateWechatUserInput!): UpdateWechatUserPayload
  addClinicUserPermission(input: AddClinicUserPermissionInput!): AddClinicUserPermissionPayload
  deleteClinicUserPermission(input: DeleteClinicUserPermissionInput!): DeleteClinicUserPermissionPayload
  addClinicUserRole(input: AddClinicUserRoleInput!): AddClinicUserRolePayload
  updateClinicUserRole(input: UpdateClinicUserRoleInput!): UpdateClinicUserRolePayload
  deleteClinicUserRole(input: DeleteClinicUserRoleInput!): DeleteClinicUserRolePayload
  initPermissions(input: InitPermissionsInput!): InitPermissionsPayload
  addPermission(input: AddPermissionInput!): AddPermissionPayload
  updatePermission(input: UpdatePermissionInput!): UpdatePermissionPayload
  addAliOss(input: AddAliOssInput!): AddAliOssPayload
  updateAliOss(input: UpdateAliOssInput!): UpdateAliOssPayload
  deleteAliOss(input: DeleteAliOssInput!): DeleteAliOssPayload
  sendEmail(input: SendEmailInput!): SendEmailPayload
  addExpressCompany(input: AddExpressCompanyInput!): AddExpressCompanyPayload
  updateExpressCompany(input: UpdateExpressCompanyInput!): UpdateExpressCompanyPayload
  deleteExpressCompany(input: DeleteExpressCompanyInput!): DeleteExpressCompanyPayload
  addFile(input: AddFileInput!): AddFilePayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  uploadImage(input: UploadImageInput!): UploadImagePayload
  addImage(input: AddImageInput!): AddImagePayload
  updateImage(input: UpdateImageInput!): UpdateImagePayload
  deleteImage(input: DeleteImageInput!): DeleteImagePayload
  sendSmsCode(input: SendSmsCodeInput!): SendSmsCodePayload
  checkSmsCode(input: CheckSmsCodeInput!): CheckSmsCodePayload
  sendSameSms(input: SendSameSmsInput!): SendSameSmsPayload
  sendCheckInSms(input: SendCheckInSmsInput!): SendCheckInSmsPayload
  sendContactMsg(input: SendContactMsgInput!): SendContactMsgPayload
  addContactMsg(input: AddContactMsgInput!): AddContactMsgPayload
  updateContactMsg(input: UpdateContactMsgInput!): UpdateContactMsgPayload
  deleteContactMsg(input: DeleteContactMsgInput!): DeleteContactMsgPayload

  """设置消息队列"""
  setContactMsgQueue(input: SetContactMsgQueueInput!): SetContactMsgQueuePayload

  """完成预警"""
  setContactMsgQueueStatus(input: SetContactMsgQueueStatusInput!): SetContactMsgQueueStatusPayload
  addContactMsgQueue(input: AddContactMsgQueueInput!): AddContactMsgQueuePayload
  updateContactMsgQueue(input: UpdateContactMsgQueueInput!): UpdateContactMsgQueuePayload
  deleteContactMsgQueue(input: DeleteContactMsgQueueInput!): DeleteContactMsgQueuePayload
  addClinicDepartment(input: AddClinicDepartmentInput!): AddClinicDepartmentPayload
  updateClinicDepartment(input: UpdateClinicDepartmentInput!): UpdateClinicDepartmentPayload
  grantUserFrontendPermissions(input: GrantUserFrontendPermissionsInput!): GrantUserFrontendPermissionsPayload
  grantUserBackendPermissions(input: GrantUserBackendPermissionsInput!): GrantUserBackendPermissionsPayload
  deleteUserBackendPermissions(input: DeleteUserBackendPermissionsInput!): DeleteUserBackendPermissionsPayload
  initClinicRoles(input: InitClinicRolesInput!): InitClinicRolesPayload
  addClinicRole(input: AddClinicRoleInput!): AddClinicRolePayload
  addClinicStaffV2(input: AddClinicStaffV2Input!): AddClinicStaffV2Payload
  updateClinicStaffV2(input: UpdateClinicStaffV2Input!): UpdateClinicStaffV2Payload
  updateUserClinicStatus(input: UpdateUserClinicStatusInput!): UpdateUserClinicStatusPayload
  deleteUserClinic(input: DeleteUserClinicInput!): DeleteUserClinicPayload
  updateClinicStaff(input: UpdateClinicStaffInput!): UpdateClinicStaffPayload

  """绑定医生"""
  doctorBindUser(input: DoctorBindUserInput!): DoctorBindUserPayload

  """医生解绑"""
  doctorUnbindUser(input: DoctorUnbindUserInput!): DoctorUnbindUserPayload

  """删除医生"""
  deleteDoctor(input: DeleteDoctorInput!): DeleteDoctorPayload

  """创建/修改医生的信息"""
  addOrUpdateDoctorBaseInfo(input: AddOrUpdateDoctorBaseInfoInput!): AddOrUpdateDoctorBaseInfoPayload

  """创建/修改医生的信息:智慧药房用"""
  addOrUpdateZHYFDoctorBaseInfo(input: AddOrUpdateZHYFDoctorBaseInfoInput!): AddOrUpdateZHYFDoctorBaseInfoPayload
  addOrUpdateHospital(input: AddOrUpdateHospitalInput!): AddOrUpdateHospitalPayload
  deleteHospital(input: DeleteHospitalInput!): DeleteHospitalPayload
  addHospital(input: AddHospitalInput!): AddHospitalPayload
  updateHospital(input: UpdateHospitalInput!): UpdateHospitalPayload
  addHospitalDepartment(input: AddHospitalDepartmentInput!): AddHospitalDepartmentPayload
  updateHospitalDepartment(input: UpdateHospitalDepartmentInput!): UpdateHospitalDepartmentPayload
  deleteHospitalDepartment(input: DeleteHospitalDepartmentInput!): DeleteHospitalDepartmentPayload
  addOrUpdateNurse(input: AddOrUpdateNurseInput!): AddOrUpdateNursePayload
  nurseBindUser(input: NurseBindUserInput!): NurseBindUserPayload
  nurseUnbindUser(input: NurseUnbindUserInput!): NurseUnbindUserPayload
  deleteNurse(input: DeleteNurseInput!): DeleteNursePayload

  """关注医生"""
  subscribeDoctor(input: SubscribeDoctorInput!): SubscribeDoctorPayload
  addClinicRoom(input: AddClinicRoomInput!): AddClinicRoomPayload
  updateClinicRoom(input: UpdateClinicRoomInput!): UpdateClinicRoomPayload
  addClinicMemberType(input: AddClinicMemberTypeInput!): AddClinicMemberTypePayload
  updateClinicMemberType(input: UpdateClinicMemberTypeInput!): UpdateClinicMemberTypePayload
  deleteClinicMemberType(input: DeleteClinicMemberTypeInput!): DeleteClinicMemberTypePayload
  addClinicPatientRange(input: AddClinicPatientRangeInput!): AddClinicPatientRangePayload
  updateClinicPatientRange(input: UpdateClinicPatientRangeInput!): UpdateClinicPatientRangePayload

  """患者关联会员"""
  mapClinicMemberToPatient(input: MapClinicMemberToPatientInput!): MapClinicMemberToPatientPayload

  """更新会员数据"""
  updateMemberData(input: UpdateMemberDataInput!): UpdateMemberDataPayload

  """会员数据详情"""
  memberDataIntro(input: MemberDataIntroInput!): MemberDataIntroPayload
  updatePatientMessage(input: UpdatePatientMessageInput!): UpdatePatientMessagePayload
  validatePatientPhoneNumber(input: ValidatePatientPhoneNumberInput!): ValidatePatientPhoneNumberPayload

  """暴露assignDefaultClinicMemberType2Patient属性方法"""
  assignDefaultClinicMemberType2Patient(input: AssignDefaultClinicMemberType2PatientInput!): AssignDefaultClinicMemberType2PatientPayload
  updatePatient(input: UpdatePatientInput!): UpdatePatientPayload
  addPatient(input: AddPatientInput!): AddPatientPayload
  addUserPatient(input: AddUserPatientInput!): AddUserPatientPayload
  updateUserPatient(input: UpdateUserPatientInput!): UpdateUserPatientPayload
  deleteUserPatient(input: DeleteUserPatientInput!): DeleteUserPatientPayload

  """发送客服信息"""
  sendWechatMsg(input: SendWechatMsgInput!): SendWechatMsgPayload

  """设置微信配置"""
  getSetWechatConfig(input: GetSetWechatConfigInput!): GetSetWechatConfigPayload
  updateWechatConfig(input: UpdateWechatConfigInput!): UpdateWechatConfigPayload

  """创建二维码"""
  createTmpQrCode(input: CreateTmpQrCodeInput!): CreateTmpQrCodePayload
}

type MyWorkbenchOfBackendPayload {
  roleName: String
  clinics: [Clinic]
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""护士信息"""
type Nurse implements Node {
  id: ID!

  """省编号2位+市编号2位+护士唯一ID 6位 共10位数字"""
  userCode: String
  realName: String!

  """enabled=true下唯一"""
  phoneNumber: String!
  gender: Int
  birthday: Date
  email: String
  idCardNumber: String

  """护士执业资格证"""
  qualification: String
  provinceId: ID
  province: Province
  cityId: ID
  city: City
  enabled: Boolean

  """是否绑定账号"""
  isBound: Boolean
  clinicWechatUserId: ID

  """微信号"""
  clinicWechatUser: ClinicWechatUser
  createdAt: Date
  updatedAt: Date

  """年龄"""
  age: Int

  """可绑定账号"""
  boundUser: ClinicUser
  clinicStaffs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicStaffConnection
}

input NurseBindUserInput {
  nurseId: NurseId!
  clinicUserId: ClinicUserId!
  clientMutationId: String!
}

type NurseBindUserPayload {
  changedNurse: Nurse
  clientMutationId: String!
}

"""A connection to a list of items."""
type NurseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NurseEdge]
  count: Float
}

"""An edge in a connection."""
type NurseEdge {
  """The item at the end of the edge"""
  node: Nurse

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Nurse"""
scalar NurseId

input NursesConditionInput {
  """省编号2位+市编号2位+护士唯一ID 6位 共10位数字"""
  userCode: String
  realName: String

  """enabled=true下唯一"""
  phoneNumber: String
  gender: Int
  birthday: DateConditionInput
  email: String
  idCardNumber: String

  """护士执业资格证"""
  qualification: String
  provinceId: ProvinceId
  cityId: CityId
  enabled: Boolean

  """是否绑定账号"""
  isBound: Boolean

  """微信号"""
  clinicWechatUserId: ClinicWechatUserId
}

input NursesKeywordsInput {
  fields: [String]!
  value: String!
}

input NursesOptionsInput {
  where: Json
  group: String
}

input NursesSortInput {
  field: String
  order: SortOrder
}

input NurseUnbindUserInput {
  nurseId: NurseId!
  clientMutationId: String!
}

type NurseUnbindUserPayload {
  changedNurse: Nurse
  clientMutationId: String!
}

type OwnerPayload {
  session: ClinicUserSession
  clinicStaff: ClinicStaff

  """有权限的诊所"""
  addressableClinics: [Clinic]
}

type OwnerSubscriptionPayload {
  session: ClinicUserSession
  clinicStaff: ClinicStaff

  """有权限的诊所"""
  addressableClinics: [Clinic]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""患者信息"""
type Patient implements Node {
  id: ID!

  """真实姓名"""
  realName: String!

  """1 男；2 女；3 不详"""
  gender: Int

  """出生日期"""
  dateOfBirth: Date

  """年龄"""
  age: Float

  """年龄记录时间"""
  ageRecordedAt: Date

  """手机号"""
  phoneNumber: String

  """电话"""
  telephoneNumber: String

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """婚否"""
  maritalStatus: String

  """职业"""
  occupation: String

  """名族"""
  ethnicGroup: String

  """公司"""
  company: String
  provinceId: ID

  """所在省"""
  province: Province
  cityId: ID

  """所在市"""
  city: City

  """详细地址"""
  address: String

  """出生地"""
  birthPlace: String

  """来源"""
  source: String
  avatarImageId: ID

  """头像"""
  avatarImage: Image

  """诊所会员序列号"""
  clinicMemberSerialNo: String

  """社保卡"""
  socialSecurityCard: String

  """拼音码"""
  pinyinCode: String

  """手机号码是否已验证"""
  validatedPhone: Boolean!
  createdAt: Date
  updatedAt: Date
  clinicMemberType: ClinicMemberType
  activateCardCount(clinicId: ClinicId!): Int
  mapClinicMemberPatients(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): MapClinicMemberPatientConnection
  userPatient: UserPatient
}

"""A connection to a list of items."""
type PatientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientEdge]
  count: Float
}

"""An edge in a connection."""
type PatientEdge {
  """The item at the end of the edge"""
  node: Patient

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Patient"""
scalar PatientId

input PatientsConditionInput {
  """真实姓名"""
  realName: String

  """1 男；2 女；3 不详"""
  gender: Int
  dateOfBirth: DateConditionInput

  """年龄"""
  age: Float
  ageRecordedAt: DateConditionInput

  """手机号"""
  phoneNumber: String

  """电话"""
  telephoneNumber: String

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """婚否"""
  maritalStatus: String

  """职业"""
  occupation: String

  """名族"""
  ethnicGroup: String

  """公司"""
  company: String

  """所在省"""
  provinceId: ProvinceId

  """所在市"""
  cityId: CityId

  """详细地址"""
  address: String

  """出生地"""
  birthPlace: String

  """来源"""
  source: String

  """头像"""
  avatarImageId: ImageId

  """诊所会员序列号"""
  clinicMemberSerialNo: String

  """社保卡"""
  socialSecurityCard: String

  """拼音码"""
  pinyinCode: String

  """手机号码是否已验证"""
  validatedPhone: Boolean
}

input PatientsKeywordsInput {
  fields: [String]!
  value: String!
}

input PatientsOptionsInput {
  where: Json
  group: String
}

input PatientsSortInput {
  field: String
  order: SortOrder
}

"""权限表"""
type Permission implements Node {
  id: ID!

  """权限名称"""
  name: String!

  """权限编码"""
  code: String!

  """排序"""
  sort: Int!

  """父权限编码"""
  parentCode: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]
  count: Float
}

"""An edge in a connection."""
type PermissionEdge {
  """The item at the end of the edge"""
  node: Permission

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Permission"""
scalar PermissionId

input PermissionsConditionInput {
  """权限名称"""
  name: String

  """权限编码"""
  code: String

  """排序"""
  sort: Int

  """父权限编码"""
  parentCode: String
}

input PermissionsKeywordsInput {
  fields: [String]!
  value: String!
}

input PermissionsOptionsInput {
  where: Json
  group: String
}

input PermissionsSortInput {
  field: String
  order: SortOrder
}

"""省"""
type Province implements Node {
  id: ID!

  """省名"""
  name: String

  """编码"""
  code: String

  """已激活的：只有当该区域创建了诊所时，该区域自动变为可用"""
  activated: Boolean
  createdAt: Date
  updatedAt: Date
  cities(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): CityConnection
  clinics(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): ClinicConnection
}

"""A connection to a list of items."""
type ProvinceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProvinceEdge]
  count: Float
}

"""An edge in a connection."""
type ProvinceEdge {
  """The item at the end of the edge"""
  node: Province

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Province"""
scalar ProvinceId

input ProvincesConditionInput {
  """省名"""
  name: String

  """编码"""
  code: String

  """已激活的：只有当该区域创建了诊所时，该区域自动变为可用"""
  activated: Boolean
}

input ProvincesKeywordsInput {
  fields: [String]!
  value: String!
}

input ProvincesOptionsInput {
  where: Json
  group: String
}

input ProvincesSortInput {
  field: String
  order: SortOrder
}

type Query {
  applicationCenter(
    """Id of Schema ApplicationCenter"""
    id: ApplicationCenterId
  ): ApplicationCenter
  applicationCenters(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ApplicationCentersConditionInput

    """Sequelize.findAll(option)"""
    options: ApplicationCentersOptionsInput

    """Define the sort field"""
    sort: [ApplicationCentersSortInput]
    keywords: ApplicationCentersKeywordsInput
  ): ApplicationCenterConnection

  """获取诊所二维码"""
  getClinicQrCode(id: ClinicId!): GetClinicQrCodePayload
  getClinicsByProvince(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    provinceId: ProvinceId!
    cityId: CityId
    keywords: String
  ): ClinicConnection

  """诊所库诊所状况（有数据权限过滤）"""
  getClinicCountByProvince(provinceId: ProvinceId, cityId: CityId): GetClinicCountByProvincePayload
  clinicQuantity(provinceId: ProvinceId, cityId: CityId): [ClinicQuantityPayload]
  listClinics(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    longitude: Float
    latitude: Float
    filterName: String
    sort: ListClinicsSort
  ): ClinicConnection
  listSearchClinics(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    longitude: Float
    latitude: Float
    filterName: String
    sort: ListSearchClinicsSort
  ): ClinicConnection

  """查询诊所列表"""
  getClinics(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    sort: [GetClinicsSortInput]
    conditions: GetClinicsConditionsInput
  ): ClinicConnection

  """
  查询诊所(接口：userMonthCheckInAmountReport、userMonthAgeReport、userMonthDepartmentReport、userMonthPayReport调用)
  """
  getClinics4UserMonthReport(clinicId: ClinicId): [Clinic]

  """获取最新的关注数和报到数"""
  getRecentSubscribeAndCheckInCount(
    """医生的手机号"""
    phoneNumber: String!
  ): GetRecentSubscribeAndCheckInCountPayload
  clinic(
    """Id of Schema Clinic"""
    id: ClinicId
  ): Clinic
  clinics(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicsOptionsInput

    """Define the sort field"""
    sort: [ClinicsSortInput]
    keywords: ClinicsKeywordsInput
  ): ClinicConnection
  wxJsConfig(
    """ 默认值:false"""
    debug: Boolean = false
    jsApiList: [String]!
    url: String!
  ): WxJsConfigPayload
  getClinicConfig(clinicId: ClinicId!, key: String!, valueKey: String): Json

  """通过医生id获取开启智慧药房的诊所"""
  getExternalClinics: GetExternalClinicsPayload
  clinicConfig(
    """Id of Schema ClinicConfig"""
    id: ClinicConfigId
  ): ClinicConfig
  clinicConfigs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicConfigsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicConfigsOptionsInput

    """Define the sort field"""
    sort: [ClinicConfigsSortInput]
    keywords: ClinicConfigsKeywordsInput
  ): ClinicConfigConnection
  clinicFile(
    """Id of Schema ClinicFile"""
    id: ClinicFileId
  ): ClinicFile
  clinicFiles(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicFilesConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicFilesOptionsInput

    """Define the sort field"""
    sort: [ClinicFilesSortInput]
    keywords: ClinicFilesKeywordsInput
  ): ClinicFileConnection

  """查询诊所服务配置"""
  getClinicFunctionModuleConfigs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    condition: GetClinicFunctionModuleConfigsConditionInput
  ): ClinicFunctionModuleConfigConnection
  clinicFunctionModuleConfig(
    """Id of Schema ClinicFunctionModuleConfig"""
    id: ClinicFunctionModuleConfigId
  ): ClinicFunctionModuleConfig
  clinicFunctionModuleConfigs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicFunctionModuleConfigsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicFunctionModuleConfigsOptionsInput

    """Define the sort field"""
    sort: [ClinicFunctionModuleConfigsSortInput]
    keywords: ClinicFunctionModuleConfigsKeywordsInput
  ): ClinicFunctionModuleConfigConnection
  clinicIndex(
    """Id of Schema ClinicIndex"""
    id: ClinicIndexId
  ): ClinicIndex
  clinicIndexs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicIndexsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicIndexsOptionsInput

    """Define the sort field"""
    sort: [ClinicIndexsSortInput]
    keywords: ClinicIndexsKeywordsInput
  ): ClinicIndexConnection
  recentStatusDescription: ClinicRecord
  clinicRecord(
    """Id of Schema ClinicRecord"""
    id: ClinicRecordId
  ): ClinicRecord
  clinicRecords(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicRecordsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicRecordsOptionsInput

    """Define the sort field"""
    sort: [ClinicRecordsSortInput]
    keywords: ClinicRecordsKeywordsInput
  ): ClinicRecordConnection
  config(
    """Id of Schema Config"""
    id: ConfigId
  ): Config
  configs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ConfigsConditionInput

    """Sequelize.findAll(option)"""
    options: ConfigsOptionsInput

    """Define the sort field"""
    sort: [ConfigsSortInput]
    keywords: ConfigsKeywordsInput
  ): ConfigConnection
  functionModuleConfig(
    """Id of Schema FunctionModuleConfig"""
    id: FunctionModuleConfigId
  ): FunctionModuleConfig
  functionModuleConfigs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: FunctionModuleConfigsConditionInput

    """Sequelize.findAll(option)"""
    options: FunctionModuleConfigsOptionsInput

    """Define the sort field"""
    sort: [FunctionModuleConfigsSortInput]
    keywords: FunctionModuleConfigsKeywordsInput
  ): FunctionModuleConfigConnection

  """获取热搜"""
  hotSearchs: [Search]
  search(
    """Id of Schema Search"""
    id: SearchId
  ): Search
  searchs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: SearchsConditionInput

    """Sequelize.findAll(option)"""
    options: SearchsOptionsInput

    """Define the sort field"""
    sort: [SearchsSortInput]
    keywords: SearchsKeywordsInput
  ): SearchConnection
  generateSerialNumber(clinicId: ClinicId, category: GenerateSerialNumberCategory!): String
  serialNumber(
    """Id of Schema SerialNumber"""
    id: SerialNumberId
  ): SerialNumber
  serialNumbers(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: SerialNumbersConditionInput

    """Sequelize.findAll(option)"""
    options: SerialNumbersOptionsInput

    """Define the sort field"""
    sort: [SerialNumbersSortInput]
    keywords: SerialNumbersKeywordsInput
  ): SerialNumberConnection
  task(
    """Id of Schema Task"""
    id: TaskId
  ): Task
  tasks(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: TasksConditionInput

    """Sequelize.findAll(option)"""
    options: TasksOptionsInput

    """Define the sort field"""
    sort: [TasksSortInput]
    keywords: TasksKeywordsInput
  ): TaskConnection
  versionHistory(
    """Id of Schema VersionHistory"""
    id: VersionHistoryId
  ): VersionHistory
  versionHistorys(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: VersionHistorysConditionInput

    """Sequelize.findAll(option)"""
    options: VersionHistorysOptionsInput

    """Define the sort field"""
    sort: [VersionHistorysSortInput]
    keywords: VersionHistorysKeywordsInput
  ): VersionHistoryConnection
  owner: OwnerPayload

  """获取用户,用户名模糊搜索"""
  getClinicUser(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    keywords: String!
  ): ClinicUserConnection
  existsUserPhone(phoneNumber: String): Boolean

  """账号管理-账号查询列表"""
  getClinicUsers(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    sort: [GetClinicUsersSortInput]
    conditions: GetClinicUsersConditionsInput
  ): ClinicUserConnection

  """获取Session，用于运营后台跳转云诊所"""
  getSsoSession(clinicId: ClinicId!, clinicUserId: ClinicUserId): ClinicUserSession

  """根据context获取用户"""
  getClinicUserByContext: ClinicUser

  """根据context获取用户session"""
  getClinicUserSessionByContext: ClinicUserSession
  clinicUser(
    """Id of Schema ClinicUser"""
    id: ClinicUserId
  ): ClinicUser
  clinicUsers(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicUsersConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicUsersOptionsInput

    """Define the sort field"""
    sort: [ClinicUsersSortInput]
    keywords: ClinicUsersKeywordsInput
  ): ClinicUserConnection
  getClinicUserConfig(clinicUserId: ClinicUserId): ClinicUserConfig
  clinicUserConfig(
    """Id of Schema ClinicUserConfig"""
    id: ClinicUserConfigId
  ): ClinicUserConfig
  clinicUserStudy(
    """Id of Schema ClinicUserStudy"""
    id: ClinicUserStudyId
  ): ClinicUserStudy
  clinicUserStudys(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicUserStudysConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicUserStudysOptionsInput

    """Define the sort field"""
    sort: [ClinicUserStudysSortInput]
    keywords: ClinicUserStudysKeywordsInput
  ): ClinicUserStudyConnection
  clinicWechatUser(
    """Id of Schema ClinicWechatUser"""
    id: ClinicWechatUserId
  ): ClinicWechatUser
  clinicWechatUsers(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicWechatUsersConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicWechatUsersOptionsInput

    """Define the sort field"""
    sort: [ClinicWechatUsersSortInput]
    keywords: ClinicWechatUsersKeywordsInput
  ): ClinicWechatUserConnection

  """获取登录的用户信息"""
  getUser: User
  user(
    """Id of Schema User"""
    id: UserId
  ): User
  users(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: UsersConditionInput

    """Sequelize.findAll(option)"""
    options: UsersOptionsInput

    """Define the sort field"""
    sort: [UsersSortInput]
    keywords: UsersKeywordsInput
  ): UserConnection
  e01UserInfo: User

  """通过登录的微信token获取微信用户"""
  getWechatUser(
    """微信登录的token"""
    wxAccessToken: String!
  ): WechatUser

  """获取关注诊所的用户"""
  getClinicWechatUser(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """诊所id"""
    clinicId: ClinicId

    """所在城市id"""
    cityId: CityId

    """所在省id"""
    provinceId: ProvinceId
    sort: [GetClinicWechatUserSortInput]
  ): WechatUserConnection
  wechatUser(
    """Id of Schema WechatUser"""
    id: WechatUserId

    """微信的openid"""
    openid: String
  ): WechatUser
  wechatUsers(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatUsersConditionInput

    """Sequelize.findAll(option)"""
    options: WechatUsersOptionsInput

    """Define the sort field"""
    sort: [WechatUsersSortInput]
    keywords: WechatUsersKeywordsInput
  ): WechatUserConnection
  wechatUserSession(
    """Id of Schema WechatUserSession"""
    id: WechatUserSessionId
  ): WechatUserSession
  wechatUserSessions(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatUserSessionsConditionInput

    """Sequelize.findAll(option)"""
    options: WechatUserSessionsOptionsInput

    """Define the sort field"""
    sort: [WechatUserSessionsSortInput]
    keywords: WechatUserSessionsKeywordsInput
  ): WechatUserSessionConnection

  """获取当前用户具有权限的省、市、诊所"""
  findHasPermissionAreaAndClinics: [FindHasPermissionAreaAndClinicsPayload]

  """获取当前用户具有权限的省、市"""
  findHasPermissionArea: [FindHasPermissionAreaPayload]

  """我的工作台"""
  myWorkbenchOfBackend: MyWorkbenchOfBackendPayload

  """根据查询条件，查询出当前用户拥有权限的诊所ID"""
  findClinicIdsFromCondition(clinicId: ClinicId, provinceId: ProvinceId, cityId: CityId): FindClinicIdsFromConditionPayload

  """根据查询条件，查询出当前用户拥有权限的诊所ID，条件是OR关系"""
  findClinicIdsFromPermission(clinicIds: [ClinicId], provinceIds: [ProvinceId], cityIds: [CityId]): FindClinicIdsFromPermissionPayload

  """根据当前用户，查询该用户拥有权限的诊所ID"""
  findClinicIdsFromUser(clinicUserId: ClinicUserId): FindClinicIdsFromUserPayload
  clinicUserPermission(
    """Id of Schema ClinicUserPermission"""
    id: ClinicUserPermissionId
  ): ClinicUserPermission
  clinicUserPermissions(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicUserPermissionsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicUserPermissionsOptionsInput

    """Define the sort field"""
    sort: [ClinicUserPermissionsSortInput]
    keywords: ClinicUserPermissionsKeywordsInput
  ): ClinicUserPermissionConnection
  clinicUserRole(
    """Id of Schema ClinicUserRole"""
    id: ClinicUserRoleId
  ): ClinicUserRole
  clinicUserRoles(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicUserRolesConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicUserRolesOptionsInput

    """Define the sort field"""
    sort: [ClinicUserRolesSortInput]
    keywords: ClinicUserRolesKeywordsInput
  ): ClinicUserRoleConnection

  """获取前台权限列表"""
  getFrontendPermissions: [Json]
  permission(
    """Id of Schema Permission"""
    id: PermissionId
  ): Permission
  permissions(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: PermissionsConditionInput

    """Sequelize.findAll(option)"""
    options: PermissionsOptionsInput

    """Define the sort field"""
    sort: [PermissionsSortInput]
    keywords: PermissionsKeywordsInput
  ): PermissionConnection

  """获取阿里云的signature"""
  getAliOssSignature: GetAliOssSignaturePayload
  aliOss(
    """Id of Schema AliOss"""
    id: AliOssId
  ): AliOss
  aliOsss(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: AliOsssConditionInput

    """Sequelize.findAll(option)"""
    options: AliOsssOptionsInput

    """Define the sort field"""
    sort: [AliOsssSortInput]
    keywords: AliOsssKeywordsInput
  ): AliOssConnection
  area(
    """Id of Schema Area"""
    id: AreaId
  ): Area
  areas(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: AreasConditionInput

    """Sequelize.findAll(option)"""
    options: AreasOptionsInput

    """Define the sort field"""
    sort: [AreasSortInput]
    keywords: AreasKeywordsInput
  ): AreaConnection

  """获取诊所，根据所在城市去重"""
  clinicCities: [Clinic]
  city(
    """Id of Schema City"""
    id: CityId
  ): City
  citys(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: CitysConditionInput

    """Sequelize.findAll(option)"""
    options: CitysOptionsInput

    """Define the sort field"""
    sort: [CitysSortInput]
    keywords: CitysKeywordsInput
  ): CityConnection
  company(
    """Id of Schema Company"""
    id: CompanyId
  ): Company
  companys(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: CompanysConditionInput

    """Sequelize.findAll(option)"""
    options: CompanysOptionsInput

    """Define the sort field"""
    sort: [CompanysSortInput]
    keywords: CompanysKeywordsInput
  ): CompanyConnection
  district(
    """Id of Schema District"""
    id: DistrictId
  ): District
  districts(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: DistrictsConditionInput

    """Sequelize.findAll(option)"""
    options: DistrictsOptionsInput

    """Define the sort field"""
    sort: [DistrictsSortInput]
    keywords: DistrictsKeywordsInput
  ): DistrictConnection
  emailLog(
    """Id of Schema EmailLog"""
    id: EmailLogId
  ): EmailLog
  emailLogs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: EmailLogsConditionInput

    """Sequelize.findAll(option)"""
    options: EmailLogsOptionsInput

    """Define the sort field"""
    sort: [EmailLogsSortInput]
    keywords: EmailLogsKeywordsInput
  ): EmailLogConnection
  expressCompany(
    """Id of Schema ExpressCompany"""
    id: ExpressCompanyId
  ): ExpressCompany
  expressCompanys(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ExpressCompanysConditionInput

    """Sequelize.findAll(option)"""
    options: ExpressCompanysOptionsInput

    """Define the sort field"""
    sort: [ExpressCompanysSortInput]
    keywords: ExpressCompanysKeywordsInput
  ): ExpressCompanyConnection
  file(
    """Id of Schema File"""
    id: FileId
  ): File
  files(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: FilesConditionInput

    """Sequelize.findAll(option)"""
    options: FilesOptionsInput

    """Define the sort field"""
    sort: [FilesSortInput]
    keywords: FilesKeywordsInput
  ): FileConnection
  icd10Code(
    """Id of Schema Icd10Code"""
    id: Icd10CodeId
  ): Icd10Code
  icd10Codes(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: Icd10CodesConditionInput

    """Sequelize.findAll(option)"""
    options: Icd10CodesOptionsInput

    """Define the sort field"""
    sort: [Icd10CodesSortInput]
    keywords: Icd10CodesKeywordsInput
  ): Icd10CodeConnection
  image(
    """Id of Schema Image"""
    id: ImageId
  ): Image
  images(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ImagesConditionInput

    """Sequelize.findAll(option)"""
    options: ImagesOptionsInput

    """Define the sort field"""
    sort: [ImagesSortInput]
    keywords: ImagesKeywordsInput
  ): ImageConnection
  province(
    """Id of Schema Province"""
    id: ProvinceId
  ): Province
  provinces(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ProvincesConditionInput

    """Sequelize.findAll(option)"""
    options: ProvincesOptionsInput

    """Define the sort field"""
    sort: [ProvincesSortInput]
    keywords: ProvincesKeywordsInput
  ): ProvinceConnection
  smsCode(
    """Id of Schema SmsCode"""
    id: SmsCodeId
  ): SmsCode
  contactMsg(
    """Id of Schema ContactMsg"""
    id: ContactMsgId
  ): ContactMsg
  contactMsgs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ContactMsgsConditionInput

    """Sequelize.findAll(option)"""
    options: ContactMsgsOptionsInput

    """Define the sort field"""
    sort: [ContactMsgsSortInput]
    keywords: ContactMsgsKeywordsInput
  ): ContactMsgConnection

  """获取消息队列"""
  getContactMsgQueues(
    """消息队列 默认值:MEDICINE_EXPIRING"""
    type: GetContactMsgQueuesType = MEDICINE_EXPIRING

    """ 默认值:3"""
    limit: Float = 3
  ): [Json]
  contactMsgQueue(
    """Id of Schema ContactMsgQueue"""
    id: ContactMsgQueueId
  ): ContactMsgQueue
  contactMsgQueues(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ContactMsgQueuesConditionInput

    """Sequelize.findAll(option)"""
    options: ContactMsgQueuesOptionsInput

    """Define the sort field"""
    sort: [ContactMsgQueuesSortInput]
    keywords: ContactMsgQueuesKeywordsInput
  ): ContactMsgQueueConnection
  listClinicDepartments: ListClinicDepartmentsPayload
  clinicDepartment(
    """Id of Schema ClinicDepartment"""
    id: ClinicDepartmentId
  ): ClinicDepartment
  clinicDepartments(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicDepartmentsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicDepartmentsOptionsInput

    """Define the sort field"""
    sort: [ClinicDepartmentsSortInput]
    keywords: ClinicDepartmentsKeywordsInput
  ): ClinicDepartmentConnection

  """获取用户权限"""
  findUserPermissions(
    clinicUserId: ClinicUserId!

    """前台权限、后台权限"""
    permissionType: FindUserPermissionsPermissionType!
    clinicId: ClinicId

    """角色名称"""
    name: String
    clinicName: String
  ): FindUserPermissionsPayload
  clinicRole(
    """Id of Schema ClinicRole"""
    id: ClinicRoleId
  ): ClinicRole
  clinicRoles(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicRolesConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicRolesOptionsInput

    """Define the sort field"""
    sort: [ClinicRolesSortInput]
    keywords: ClinicRolesKeywordsInput
  ): ClinicRoleConnection
  recommendedDoctors(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    longitude: Float
    latitude: Float
    isExpert: Boolean
  ): ClinicStaffConnection
  getClinicDoctors(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    clinicId: ClinicId!
  ): ClinicStaffConnection
  getClinicStaffByPhone(phoneNumber: String!, clinicId: ClinicId!): ClinicStaff
  clinicStaff(
    """Id of Schema ClinicStaff"""
    id: ClinicStaffId
  ): ClinicStaff
  clinicStaffs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicStaffsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicStaffsOptionsInput

    """Define the sort field"""
    sort: [ClinicStaffsSortInput]
    keywords: ClinicStaffsKeywordsInput
  ): ClinicStaffConnection
  department(
    """Id of Schema Department"""
    id: DepartmentId
  ): Department
  departments(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: DepartmentsConditionInput

    """Sequelize.findAll(option)"""
    options: DepartmentsOptionsInput

    """Define the sort field"""
    sort: [DepartmentsSortInput]
    keywords: DepartmentsKeywordsInput
  ): DepartmentConnection
  departmentTypeName(
    """Id of Schema DepartmentTypeName"""
    id: DepartmentTypeNameId
  ): DepartmentTypeName
  departmentTypeNames(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: DepartmentTypeNamesConditionInput

    """Sequelize.findAll(option)"""
    options: DepartmentTypeNamesOptionsInput

    """Define the sort field"""
    sort: [DepartmentTypeNamesSortInput]
    keywords: DepartmentTypeNamesKeywordsInput
  ): DepartmentTypeNameConnection

  """系统身份列表"""
  doctorTypes: [DoctorTypesPayload]

  """系统身份"""
  doctorType(code: String): DoctorTypePayload

  """代开方医生"""
  insteadDoctors(
    """编辑中的医生"""
    doctorId: DoctorId
    clinicId: ClinicId!
  ): [Doctor]

  """诊所接诊医生"""
  findClinicDoctors(clinicId: ClinicId!): [Doctor]

  """查询医生列表"""
  getDoctors(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    sort: [GetDoctorsSortInput]
    conditions: GetDoctorsConditionsInput
  ): DoctorConnection
  doctor(
    """Id of Schema Doctor"""
    id: DoctorId

    """手机号"""
    phoneNumber: String
  ): Doctor
  doctors(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: DoctorsConditionInput

    """Sequelize.findAll(option)"""
    options: DoctorsOptionsInput

    """Define the sort field"""
    sort: [DoctorsSortInput]
    keywords: DoctorsKeywordsInput
  ): DoctorConnection
  doctorHospitalRel(
    """Id of Schema DoctorHospitalRel"""
    id: DoctorHospitalRelId
  ): DoctorHospitalRel
  doctorHospitalRels(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: DoctorHospitalRelsConditionInput

    """Sequelize.findAll(option)"""
    options: DoctorHospitalRelsOptionsInput

    """Define the sort field"""
    sort: [DoctorHospitalRelsSortInput]
    keywords: DoctorHospitalRelsKeywordsInput
  ): DoctorHospitalRelConnection
  doctorInfo(
    """Id of Schema DoctorInfo"""
    id: DoctorInfoId
  ): DoctorInfo
  doctorInfos(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: DoctorInfosConditionInput

    """Sequelize.findAll(option)"""
    options: DoctorInfosOptionsInput

    """Define the sort field"""
    sort: [DoctorInfosSortInput]
    keywords: DoctorInfosKeywordsInput
  ): DoctorInfoConnection

  """医院管理-医院查询列表"""
  getHospitals(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    sort: [GetHospitalsSortInput]
    conditions: GetHospitalsConditionsInput
  ): HospitalConnection
  hospital(
    """Id of Schema Hospital"""
    id: HospitalId
    code: String
  ): Hospital
  hospitals(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: HospitalsConditionInput

    """Sequelize.findAll(option)"""
    options: HospitalsOptionsInput

    """Define the sort field"""
    sort: [HospitalsSortInput]
    keywords: HospitalsKeywordsInput
  ): HospitalConnection
  hospitalDepartment(
    """Id of Schema HospitalDepartment"""
    id: HospitalDepartmentId
  ): HospitalDepartment
  hospitalDepartments(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: HospitalDepartmentsConditionInput

    """Sequelize.findAll(option)"""
    options: HospitalDepartmentsOptionsInput

    """Define the sort field"""
    sort: [HospitalDepartmentsSortInput]
    keywords: HospitalDepartmentsKeywordsInput
  ): HospitalDepartmentConnection
  jobPositionName(
    """Id of Schema JobPositionName"""
    id: JobPositionNameId
  ): JobPositionName
  jobPositionNames(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: JobPositionNamesConditionInput

    """Sequelize.findAll(option)"""
    options: JobPositionNamesOptionsInput

    """Define the sort field"""
    sort: [JobPositionNamesSortInput]
    keywords: JobPositionNamesKeywordsInput
  ): JobPositionNameConnection
  jobTypeName(
    """Id of Schema JobTypeName"""
    id: JobTypeNameId
  ): JobTypeName
  jobTypeNames(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: JobTypeNamesConditionInput

    """Sequelize.findAll(option)"""
    options: JobTypeNamesOptionsInput

    """Define the sort field"""
    sort: [JobTypeNamesSortInput]
    keywords: JobTypeNamesKeywordsInput
  ): JobTypeNameConnection
  level(
    """Id of Schema Level"""
    id: LevelId
  ): Level
  levels(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: LevelsConditionInput

    """Sequelize.findAll(option)"""
    options: LevelsOptionsInput

    """Define the sort field"""
    sort: [LevelsSortInput]
    keywords: LevelsKeywordsInput
  ): LevelConnection

  """护士管理-护士查询列表"""
  getNurses(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    sort: [GetNursesSortInput]
    conditions: GetNursesConditionsInput
  ): NurseConnection
  nurse(
    """Id of Schema Nurse"""
    id: NurseId
  ): Nurse
  nurses(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: NursesConditionInput

    """Sequelize.findAll(option)"""
    options: NursesOptionsInput

    """Define the sort field"""
    sort: [NursesSortInput]
    keywords: NursesKeywordsInput
  ): NurseConnection

  """获取我关注的"""
  mySubscribes(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): SubscribeConnection
  subscribe(
    """Id of Schema Subscribe"""
    id: SubscribeId
  ): Subscribe
  subscribes(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: SubscribesConditionInput

    """Sequelize.findAll(option)"""
    options: SubscribesOptionsInput

    """Define the sort field"""
    sort: [SubscribesSortInput]
    keywords: SubscribesKeywordsInput
  ): SubscribeConnection
  clinicRoom(
    """Id of Schema ClinicRoom"""
    id: ClinicRoomId
  ): ClinicRoom
  clinicRooms(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicRoomsConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicRoomsOptionsInput

    """Define the sort field"""
    sort: [ClinicRoomsSortInput]
    keywords: ClinicRoomsKeywordsInput
  ): ClinicRoomConnection
  roomTypeName(
    """Id of Schema RoomTypeName"""
    id: RoomTypeNameId
  ): RoomTypeName
  roomTypeNames(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: RoomTypeNamesConditionInput

    """Sequelize.findAll(option)"""
    options: RoomTypeNamesOptionsInput

    """Define the sort field"""
    sort: [RoomTypeNamesSortInput]
    keywords: RoomTypeNamesKeywordsInput
  ): RoomTypeNameConnection
  clinicMemberTypeSerialNo(clinicId: ClinicId): String
  clinicMemberType(
    """Id of Schema ClinicMemberType"""
    id: ClinicMemberTypeId
  ): ClinicMemberType
  clinicMemberTypes(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicMemberTypesConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicMemberTypesOptionsInput

    """Define the sort field"""
    sort: [ClinicMemberTypesSortInput]
    keywords: ClinicMemberTypesKeywordsInput
  ): ClinicMemberTypeConnection
  clinicPatientRange(
    """Id of Schema ClinicPatientRange"""
    id: ClinicPatientRangeId
  ): ClinicPatientRange
  clinicPatientRanges(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: ClinicPatientRangesConditionInput

    """Sequelize.findAll(option)"""
    options: ClinicPatientRangesOptionsInput

    """Define the sort field"""
    sort: [ClinicPatientRangesSortInput]
    keywords: ClinicPatientRangesKeywordsInput
  ): ClinicPatientRangeConnection

  """获取会员类型，微服务使用"""
  getMapClinicMemberPatients(
    patientId: PatientId
    clinicId: ClinicId
    enabled: Boolean

    """ 默认值:999999"""
    first: Float = 999999
  ): [MapClinicMemberPatient]
  mapClinicMemberPatient(
    """Id of Schema MapClinicMemberPatient"""
    id: MapClinicMemberPatientId
  ): MapClinicMemberPatient
  mapClinicMemberPatients(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: MapClinicMemberPatientsConditionInput

    """Sequelize.findAll(option)"""
    options: MapClinicMemberPatientsOptionsInput

    """Define the sort field"""
    sort: [MapClinicMemberPatientsSortInput]
    keywords: MapClinicMemberPatientsKeywordsInput
  ): MapClinicMemberPatientConnection

  """获取患者"""
  getPatients(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
    clinicMemberTypeId: ClinicMemberTypeId
    keyword: String
    clinicId: ClinicId
    sort: [GetPatientsSortInput]
  ): PatientConnection

  """获取患者折扣"""
  getPatientDiscount(patientId: PatientId!, clinicId: ClinicId): GetPatientDiscountPayload
  patient(
    """Id of Schema Patient"""
    id: PatientId
  ): Patient
  patients(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: PatientsConditionInput

    """Sequelize.findAll(option)"""
    options: PatientsOptionsInput

    """Define the sort field"""
    sort: [PatientsSortInput]
    keywords: PatientsKeywordsInput
  ): PatientConnection

  """获取用户的患者"""
  getUserPatients(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): UserPatientConnection

  """获取/创建patientUser，院外处方用"""
  getOrCreateUserPatient(userId: UserId!): GetOrCreateUserPatientPayload
  userPatient(
    """Id of Schema UserPatient"""
    id: UserPatientId
  ): UserPatient
  userPatients(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: UserPatientsConditionInput

    """Sequelize.findAll(option)"""
    options: UserPatientsOptionsInput

    """Define the sort field"""
    sort: [UserPatientsSortInput]
    keywords: UserPatientsKeywordsInput
  ): UserPatientConnection

  """获取微信的js配置"""
  wechatJsConfig(
    """是否开启调试模式 默认值:false"""
    debug: Boolean = false

    """要开启的微信js"""
    jsApiList: [String]!

    """使用配置的url"""
    url: String!
  ): WechatJsConfigPayload

  """获取微信素材"""
  getMaterials(
    """素材类型。image：图片；video：视频；voice：音频；news：图文"""
    type: GetMaterialsType!

    """ 默认值:0"""
    offset: Float = 0

    """ 默认值:20"""
    count: Float = 20
  ): GetMaterialsPayload

  """获取某个素材信息"""
  getMaterial(
    """素材id，微信的mediaId"""
    mediaId: String!
  ): GetMaterialPayload

  """获取卡券的ext信息"""
  getCardExt(
    """用户微信openid"""
    openid: String

    """作用未知"""
    card_id: String

    """作为未知，先不传"""
    balance: Float
  ): Json
  wechatConfig(
    """Id of Schema WechatConfig"""
    id: WechatConfigId

    """配置键名"""
    key: String
  ): WechatConfig
  wechatConfigs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatConfigsConditionInput

    """Sequelize.findAll(option)"""
    options: WechatConfigsOptionsInput

    """Define the sort field"""
    sort: [WechatConfigsSortInput]
    keywords: WechatConfigsKeywordsInput
  ): WechatConfigConnection
  wechatEventMessageLog(
    """Id of Schema WechatEventMessageLog"""
    id: WechatEventMessageLogId
  ): WechatEventMessageLog
  wechatEventMessageLogs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatEventMessageLogsConditionInput

    """Sequelize.findAll(option)"""
    options: WechatEventMessageLogsOptionsInput

    """Define the sort field"""
    sort: [WechatEventMessageLogsSortInput]
    keywords: WechatEventMessageLogsKeywordsInput
  ): WechatEventMessageLogConnection
  wechatInMessageLog(
    """Id of Schema WechatInMessageLog"""
    id: WechatInMessageLogId
  ): WechatInMessageLog
  wechatInMessageLogs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatInMessageLogsConditionInput

    """Sequelize.findAll(option)"""
    options: WechatInMessageLogsOptionsInput

    """Define the sort field"""
    sort: [WechatInMessageLogsSortInput]
    keywords: WechatInMessageLogsKeywordsInput
  ): WechatInMessageLogConnection
  wechatQrCode(
    """Id of Schema WechatQrCode"""
    id: WechatQrCodeId
    ticket: String
  ): WechatQrCode
  wechatQrCodes(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatQrCodesConditionInput

    """Sequelize.findAll(option)"""
    options: WechatQrCodesOptionsInput

    """Define the sort field"""
    sort: [WechatQrCodesSortInput]
    keywords: WechatQrCodesKeywordsInput
  ): WechatQrCodeConnection
  wechatReplyMessage(
    """Id of Schema WechatReplyMessage"""
    id: WechatReplyMessageId
  ): WechatReplyMessage
  wechatReplyMessages(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatReplyMessagesConditionInput

    """Sequelize.findAll(option)"""
    options: WechatReplyMessagesOptionsInput

    """Define the sort field"""
    sort: [WechatReplyMessagesSortInput]
    keywords: WechatReplyMessagesKeywordsInput
  ): WechatReplyMessageConnection
  wechatTextMessage(
    """Id of Schema WechatTextMessage"""
    id: WechatTextMessageId
  ): WechatTextMessage
  wechatTextMessages(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatTextMessagesConditionInput

    """Sequelize.findAll(option)"""
    options: WechatTextMessagesOptionsInput

    """Define the sort field"""
    sort: [WechatTextMessagesSortInput]
    keywords: WechatTextMessagesKeywordsInput
  ): WechatTextMessageConnection
  wechatTextMessageToReply(
    """Id of Schema WechatTextMessageToReply"""
    id: WechatTextMessageToReplyId
  ): WechatTextMessageToReply
  wechatTextMessageToReplys(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatTextMessageToReplysConditionInput

    """Sequelize.findAll(option)"""
    options: WechatTextMessageToReplysOptionsInput

    """Define the sort field"""
    sort: [WechatTextMessageToReplysSortInput]
    keywords: WechatTextMessageToReplysKeywordsInput
  ): WechatTextMessageToReplyConnection
  wechatTmpQrCode(
    """Id of Schema WechatTmpQrCode"""
    id: WechatTmpQrCodeId

    """获取的二维码ticket，凭借此ticket可以在有效时间内换取二维码。"""
    ticket: String
  ): WechatTmpQrCode
  wechatTmpQrCodes(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float

    """Query Condition"""
    condition: WechatTmpQrCodesConditionInput

    """Sequelize.findAll(option)"""
    options: WechatTmpQrCodesOptionsInput

    """Define the sort field"""
    sort: [WechatTmpQrCodesSortInput]
    keywords: WechatTmpQrCodesKeywordsInput
  ): WechatTmpQrCodeConnection
}

input ResetPasswordInput {
  clinicUserId: ClinicUserId!
  password: String!
  clientMutationId: String!
}

type ResetPasswordPayload {
  clinicUser: ClinicUser
  clientMutationId: String!
}

type RoomTypeName implements Node {
  id: ID!
  name: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type RoomTypeNameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoomTypeNameEdge]
  count: Float
}

"""An edge in a connection."""
type RoomTypeNameEdge {
  """The item at the end of the edge"""
  node: RoomTypeName

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of RoomTypeName"""
scalar RoomTypeNameId

input RoomTypeNamesConditionInput {
  name: String
}

input RoomTypeNamesKeywordsInput {
  fields: [String]!
  value: String!
}

input RoomTypeNamesOptionsInput {
  where: Json
  group: String
}

input RoomTypeNamesSortInput {
  field: String
  order: SortOrder
}

input SaveWeChatUserInput {
  """用户的唯一标识"""
  openid: String

  """用户昵称"""
  wechatNickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float

  """用户个人资料填写的省份"""
  province: String

  """普通用户个人资料填写的城市"""
  city: String

  """国家，如中国为CN"""
  country: String
  headImgId: ImageId

  """
  用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。
  """
  headImgUrl: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String

  """登录token"""
  accessToken: String

  """刷新的token"""
  refreshToken: String

  """有效期"""
  expiredAt: Date

  """是否关注"""
  subscribe: Boolean

  """关注时间"""
  subscribeAt: Date

  """上次活跃时间"""
  lastMpActiveAt: Date

  """是否把用户信息发给活动服务器 默认值:false"""
  toCommon: Boolean = false
  clientMutationId: String!
}

type SaveWeChatUserPayload {
  wechatUser: WechatUser
  user: User
  wxAccessToken: String
  clientMutationId: String!
}

"""搜索记录"""
type Search implements Node {
  id: ID!

  """搜索词"""
  word: String
  userId: ID

  """所属用户"""
  user: User
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type SearchConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchEdge]
  count: Float
}

"""An edge in a connection."""
type SearchEdge {
  """The item at the end of the edge"""
  node: Search

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Search"""
scalar SearchId

input SearchsConditionInput {
  """搜索词"""
  word: String

  """所属用户"""
  userId: UserId
}

input SearchsKeywordsInput {
  fields: [String]!
  value: String!
}

input SearchsOptionsInput {
  where: Json
  group: String
}

input SearchsSortInput {
  field: String
  order: SortOrder
}

input SendCheckInSmsInput {
  phoneNumber: String!
  type: Int!
  date: String
  patientId: PatientId
  clinicStaffId: ClinicStaffId
  clinicId: ClinicId
  clientMutationId: String!
}

type SendCheckInSmsPayload {
  success: Boolean
  msg: String
  clientMutationId: String!
}

input SendContactMsgInput {
  key: SendContactMsgKey!
  to: SendContactMsgToInput
  data: Json!
  clientMutationId: String!
}

enum SendContactMsgKey {
  ORDER_OFFLINE
  ORDER_ONLINE
  ORDER_IN_SITE
  PATIENT_DAY
  PATIENT_TODAY
  MEDICINE_EXPIRING
  MEDICINE_EXPIRED
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

type SendContactMsgPayload {
  ok: Boolean
  clientMutationId: String!
}

input SendContactMsgToInput {
  email: String
  phoneNumber: String
  openid: String
}

input SendEmailInput {
  """主题"""
  subject: String!

  """内容"""
  content: String!

  """接收者"""
  toEmails: [String]!

  """是否是html 默认值:false"""
  isHtml: Boolean = false
  clientMutationId: String!
}

type SendEmailPayload {
  sendResult: Boolean
  clientMutationId: String!
}

type SendSameSmsDataPayload {
  code: Int
  mobile: String
  msg: String
  sid: String
}

input SendSameSmsInput {
  phoneNumber: [String]
  content: String!
  clientMutationId: String!
}

type SendSameSmsPayload {
  totalFee: String
  unit: String
  data: [SendSameSmsDataPayload]
  clientMutationId: String!
}

input SendSmsCodeInput {
  phoneNumber: String!

  """ 默认值:86"""
  countryCode: String = "86"

  """验证码类型，BINDUSER：绑定手机号；CODE：获取验证码；COMMON：普通短信"""
  type: SendSmsCodeType!
  content: String
  clientMutationId: String!
}

type SendSmsCodePayload {
  success: Boolean
  msg: String
  clientMutationId: String!
}

enum SendSmsCodeType {
  BINDUSER
  CODE
  COMMON
}

input SendWechatMsgInput {
  """微信openid"""
  openid: String!

  """消息类型，目前支持video和text"""
  type: String!

  """素材id"""
  mediaId: String

  """压缩的素材id，当type=video时有用"""
  thumbMediaId: String

  """消息内容"""
  content: String
  clientMutationId: String!
}

type SendWechatMsgPayload {
  ok: Boolean
  clientMutationId: String!
}

type SerialNumber implements Node {
  id: ID!
  clinicId: ID
  clinic: Clinic!
  category: SerialNumberCategory!

  """当前流水码"""
  currentNumber: Int

  """流水码位数"""
  digit: Int

  """重置频率：每天"""
  frequency: SerialNumberFrequency
  createdAt: Date
  updatedAt: Date
}

enum SerialNumberCategory {
  StockEntry
  StockTaking
  StockDelivery
  MaterialEntry
  MaterialDelivery
  MaterialTaking
  PrePaidCardHistory
  CheckOrder
  CheckBodyOrder
  TreatmentOrder
  InspectionOrder
  BillingRecord
  MedicalRecord
  OtherCharge
  ChinesePrescription
  Prescription
  ClinicalRecord
  BillingRecordSnapshot
}

"""A connection to a list of items."""
type SerialNumberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SerialNumberEdge]
  count: Float
}

"""An edge in a connection."""
type SerialNumberEdge {
  """The item at the end of the edge"""
  node: SerialNumber

  """A cursor for use in pagination"""
  cursor: String!
}

enum SerialNumberFrequency {
  Day
}

"""Global id of SerialNumber"""
scalar SerialNumberId

enum SerialNumbersConditionCategory {
  StockEntry
  StockTaking
  StockDelivery
  MaterialEntry
  MaterialDelivery
  MaterialTaking
  PrePaidCardHistory
  CheckOrder
  CheckBodyOrder
  TreatmentOrder
  InspectionOrder
  BillingRecord
  MedicalRecord
  OtherCharge
  ChinesePrescription
  Prescription
  ClinicalRecord
  BillingRecordSnapshot
}

enum SerialNumbersConditionFrequency {
  Day
}

input SerialNumbersConditionInput {
  clinicId: ClinicId
  category: SerialNumbersConditionCategory

  """当前流水码"""
  currentNumber: Int

  """流水码位数"""
  digit: Int

  """重置频率：每天"""
  frequency: SerialNumbersConditionFrequency
}

input SerialNumbersKeywordsInput {
  fields: [String]!
  value: String!
}

input SerialNumbersOptionsInput {
  where: Json
  group: String
}

input SerialNumbersSortInput {
  field: String
  order: SortOrder
}

input SetContactMsgQueueInput {
  """诊所id"""
  clinicId: Float

  """消息队列 默认值:MEDICINE_EXPIRING"""
  type: SetContactMsgQueueType = MEDICINE_EXPIRING

  """对象id"""
  originIds: [Float]!

  """消息队列状态"""
  status: SetContactMsgQueueStatus
  clientMutationId: String!
}

type SetContactMsgQueuePayload {
  ok: Boolean
  clientMutationId: String!
}

enum SetContactMsgQueueStatus {
  waiting
  send
  finished
}

input SetContactMsgQueueStatusInput {
  """对象id"""
  originIds: [Float]!

  """消息队列 默认值:MEDICINE_EXPIRING"""
  type: SetContactMsgQueueStatusType = MEDICINE_EXPIRING

  """消息队列状态 默认值:waiting"""
  status: SetContactMsgQueueStatusStatus = waiting
  clientMutationId: String!
}

type SetContactMsgQueueStatusPayload {
  ok: Boolean
  clientMutationId: String!
}

enum SetContactMsgQueueStatusStatus {
  waiting
  send
  finished
}

enum SetContactMsgQueueStatusType {
  MEDICINE_EXPIRING
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

enum SetContactMsgQueueType {
  MEDICINE_EXPIRING
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

input SetIsE01ClinicInput {
  clinicId: ClinicId!
  isE01Clinic: Boolean!
  clientMutationId: String!
}

type SetIsE01ClinicPayload {
  changeClinicEdge: Clinic
  clientMutationId: String!
}

input SetIsReservationInput {
  clinicId: ClinicId!
  isReservation: Boolean!
  clientMutationId: String!
}

type SetIsReservationPayload {
  changeClinicEdge: Clinic
  clientMutationId: String!
}

input SetServiceRoleInput {
  clinicId: ClinicId!
  isE01Clinic: Boolean!
  isReservation: Boolean!
  clientMutationId: String!
}

type SetServiceRolePayload {
  changeClinicEdge: Clinic
  clientMutationId: String!
}

type SmsCode implements Node {
  id: ID!
  phoneNumber: String!
  countryCode: String!
  sentAt: Date
  expiredAt: Date
  createdAt: Date
  updatedAt: Date
}

"""Global id of SmsCode"""
scalar SmsCodeId

enum SortOrder {
  """递增排序"""
  ASC

  """递减排序"""
  DESC
}

"""用户关注诊所员工"""
type Subscribe implements Node {
  id: ID!
  clinicStaffId: ID

  """诊所员工"""
  clinicStaff: ClinicStaff!
  userId: ID

  """用户id"""
  user: User!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type SubscribeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubscribeEdge]
  count: Float
}

input SubscribeDoctorInput {
  clinicStaffId: ClinicStaffId!
  clientMutationId: String!
}

type SubscribeDoctorPayload {
  subscribe: SubscribeEdge
  clientMutationId: String!
}

"""An edge in a connection."""
type SubscribeEdge {
  """The item at the end of the edge"""
  node: Subscribe

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Subscribe"""
scalar SubscribeId

input SubscribesConditionInput {
  """诊所员工"""
  clinicStaffId: ClinicStaffId

  """用户id"""
  userId: UserId
}

input SubscribesKeywordsInput {
  fields: [String]!
  value: String!
}

input SubscribesOptionsInput {
  where: Json
  group: String
}

input SubscribesSortInput {
  field: String
  order: SortOrder
}

type Subscription {
  """subscript on create config"""
  config: Config

  """订阅：用户信息、用户权限、登录状态"""
  ownerSubscription(clinicUserId: ClinicUserId!): OwnerSubscriptionPayload

  """subscript on create user"""
  testSub(name: String): ExpressCompany
}

input SwitchUserClinicInput {
  clinicId: ClinicId!
  clientMutationId: String!
}

type SwitchUserClinicPayload {
  clinicUserSession: ClinicUserSession
  clinicStaff: ClinicStaff
  clientMutationId: String!
}

"""任务表"""
type Task implements Node {
  id: ID!

  """任务名称"""
  name: String!
  clinicId: ID

  """所在诊所"""
  clinic: Clinic
  createById: ID
  createBy: ClinicUser!
  type: TaskType

  """等待处理、处理中、完成、失败、挂起"""
  status: TaskStatus

  """导出的文件或要导入的文件url"""
  url: String
  md5: String!

  """用户是否已查看"""
  checked: Boolean!
  startAt: Date
  endAt: Date
  condition: String

  """处理结果"""
  processResult: String

  """处理结果URL(如：导入时产生的错误信息文件)"""
  processResultUrl: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]
  count: Float
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge"""
  node: Task

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of Task"""
scalar TaskId

input TasksConditionInput {
  """任务名称"""
  name: String

  """所在诊所"""
  clinicId: ClinicId
  createById: ClinicUserId
  type: TasksConditionType

  """等待处理、处理中、完成、失败、挂起"""
  status: TasksConditionStatus

  """导出的文件或要导入的文件url"""
  url: String
  md5: String

  """用户是否已查看"""
  checked: Boolean
  startAt: DateConditionInput
  endAt: DateConditionInput
  condition: String

  """处理结果"""
  processResult: String

  """处理结果URL(如：导入时产生的错误信息文件)"""
  processResultUrl: String
}

enum TasksConditionStatus {
  WaitingProcess
  Processing
  Complete
  Failure
  HoldOn
}

enum TasksConditionType {
  ExportBillingItemReport
  ExportBillingRecordDailyReport
  ExportBillingRecordSummaryReport
  ExportStockDeliveryReport
  ExportStockEntryReport
  ExportStockReport
  ExportMaterialDeliveryReport
  ExportMaterialEntryReport
  ExportMaterialStockReport
  ImportDrug
  ExportDoctorBusinessReport
  ExportFinancialDailyReport
  ExportCheckBody
}

input TasksKeywordsInput {
  fields: [String]!
  value: String!
}

input TasksOptionsInput {
  where: Json
  group: String
}

input TasksSortInput {
  field: String
  order: SortOrder
}

enum TaskStatus {
  WaitingProcess
  Processing
  Complete
  Failure
  HoldOn
}

enum TaskType {
  ExportBillingItemReport
  ExportBillingRecordDailyReport
  ExportBillingRecordSummaryReport
  ExportStockDeliveryReport
  ExportStockEntryReport
  ExportStockReport
  ExportMaterialDeliveryReport
  ExportMaterialEntryReport
  ExportMaterialStockReport
  ImportDrug
  ExportDoctorBusinessReport
  ExportFinancialDailyReport
  ExportCheckBody
}

input UpdateAliOssInput {
  id: AliOssId!
  values: UpdateAliOssValuesInput
  clientMutationId: String!
}

type UpdateAliOssPayload {
  changedAliOss: AliOss
  clientMutationId: String!
}

input UpdateAliOssValuesInput {
  key: String
  value: String
  expiration: Date
}

input UpdateApplicationCenterInput {
  applicationCenterId: ApplicationCenterId!

  """是否启用"""
  enabled: Boolean!

  """是否强制启用"""
  forceEnabled: Boolean!
  clientMutationId: String!
}

type UpdateApplicationCenterPayload {
  clinicAsset: ApplicationCenter
  clientMutationId: String!
}

input UpdateClinicConfigInput {
  clinicConfigId: ClinicConfigId!
  value: String!
  title: String
  description: String
  clientMutationId: String!
}

type UpdateClinicConfigPayload {
  changeClinicConfig: ClinicConfig
  clientMutationId: String!
}

input UpdateClinicDepartmentInput {
  id: ClinicDepartmentId!
  values: UpdateClinicDepartmentValuesInput
  clientMutationId: String!
}

type UpdateClinicDepartmentPayload {
  changedClinicDepartment: ClinicDepartment
  clientMutationId: String!
}

input UpdateClinicDepartmentValuesInput {
  clinicId: ClinicId
  departmentId: DepartmentId
  enabled: Boolean

  """弃用，待删除"""
  name: String

  """弃用，待删除"""
  departmentTypeId: DepartmentTypeNameId
}

input UpdateClinicFileInput {
  id: ClinicFileId!
  values: UpdateClinicFileValuesInput
  clientMutationId: String!
}

type UpdateClinicFilePayload {
  changedClinicFile: ClinicFile
  clientMutationId: String!
}

input UpdateClinicFileValuesInput {
  clinicId: ClinicId
  fileId: FileId
  createdById: ClinicUserId
  description: String
}

input UpdateClinicFunctionModuleConfigInput {
  id: ClinicFunctionModuleConfigId!
  values: UpdateClinicFunctionModuleConfigValuesInput
  clientMutationId: String!
}

type UpdateClinicFunctionModuleConfigPayload {
  changedClinicFunctionModuleConfig: ClinicFunctionModuleConfig
  clientMutationId: String!
}

input UpdateClinicFunctionModuleConfigValuesInput {
  """诊所"""
  clinicId: ClinicId

  """功能模块"""
  functionModuleConfigId: FunctionModuleConfigId

  """key，冗余字段"""
  key: String

  """停用、启用"""
  enabled: Boolean
}

input UpdateClinicIndexInput {
  id: ClinicIndexId!
  values: UpdateClinicIndexValuesInput
  clientMutationId: String!
}

type UpdateClinicIndexPayload {
  changedClinicIndex: ClinicIndex
  clientMutationId: String!
}

input UpdateClinicIndexValuesInput {
  clinicId: ClinicId

  """指标日期：精确到月（如：201801）"""
  indexDate: Int

  """基本指标"""
  baseIndex: Int
}

input UpdateClinicInput {
  id: ClinicId!
  values: UpdateClinicValuesInput
  clientMutationId: String!
}

input UpdateClinicMemberTypeInput {
  id: ClinicMemberTypeId!
  values: UpdateClinicMemberTypeValuesInput
  clientMutationId: String!
}

type UpdateClinicMemberTypePayload {
  changedClinicMemberType: ClinicMemberType
  clientMutationId: String!
}

input UpdateClinicMemberTypeValuesInput {
  name: String
  clinicId: ClinicId
  discountCheck: Float
  discountInspection: Float
  discountTreatment: Float
  discountChinesePrescription: Float
  discountPrescription: Float
  discountOtherCharge: Float
  discountDiagnosisCharge: Float
  enabled: Boolean

  """是否可更改，如普通会员不能更改和删除，为false"""
  mutable: Boolean
}

input UpdateClinicPatientRangeInput {
  """诊所ID"""
  clinicId: ClinicId!

  """关联诊所ID"""
  relationClinicIds: [ClinicId]
  clientMutationId: String!
}

type UpdateClinicPatientRangePayload {
  clinic: Clinic
  clientMutationId: String!
}

type UpdateClinicPayload {
  changedClinic: Clinic
  clientMutationId: String!
}

input UpdateClinicRecordInput {
  id: ClinicRecordId!
  values: UpdateClinicRecordValuesInput
  clientMutationId: String!
}

type UpdateClinicRecordPayload {
  changedClinicRecord: ClinicRecord
  clientMutationId: String!
}

input UpdateClinicRecordValuesInput {
  clinicId: ClinicId
  createdById: ClinicUserId
  beforeStatus: String
  updatedStatus: String
  comment: String
  description: String
}

input UpdateClinicRoomInput {
  id: ClinicRoomId!
  values: UpdateClinicRoomValuesInput
  clientMutationId: String!
}

type UpdateClinicRoomPayload {
  changedClinicRoom: ClinicRoom
  clientMutationId: String!
}

input UpdateClinicRoomValuesInput {
  clinicId: ClinicId
  name: String
  enabled: Boolean
  clinicRoomTypeId: RoomTypeNameId

  """是否默认诊室（快速接诊时使用默认诊室）"""
  isDefault: Boolean
}

input UpdateClinicStaffInput {
  id: ClinicStaffId!
  values: UpdateClinicStaffValuesInput
  clientMutationId: String!
}

type UpdateClinicStaffPayload {
  changedClinicStaff: ClinicStaff
  clientMutationId: String!
}

input UpdateClinicStaffV2Input {
  clinicStaffId: ClinicStaffId!
  realName: String!
  gender: Int
  birthday: Date
  idCardNumber: String
  email: String
  clinicWechatUserId: ClinicWechatUserId

  """专家特助"""
  expertAssistantClinicStaffId: ClinicStaffId
  clinicDepartmentId: ClinicDepartmentId
  jobTypeId: JobTypeNameId
  reservationFee: Float

  """诊所执业权限"""
  jobPermission: String

  """是否为专家特助 1：是 0：否"""
  expertAssistant: Float
  insteadDoctorId: DoctorId
  clientMutationId: String!
}

type UpdateClinicStaffV2Payload {
  clinicStaff: ClinicStaff
  clientMutationId: String!
}

input UpdateClinicStaffValuesInput {
  """省编号2位+市编号2位+人员唯一ID 6位 共10位数字"""
  userCode: String
  realName: String
  jobPositionId: JobPositionNameId
  jobTypeId: JobTypeNameId
  gender: Int

  """生日"""
  birthday: Date
  email: String
  idCardNumber: String
  cityId: CityId
  provinceId: ProvinceId
  clinicUserId: ClinicUserId
  avatarImageId: ImageId
  clinicId: ClinicId

  """是否默认诊所"""
  isDefault: Boolean
  isClinicAdmin: Boolean

  """有效标识"""
  enabled: Boolean

  """账号是否停用，默认启用"""
  isBlocked: Boolean
  doctorId: DoctorId
  insteadDoctorId: DoctorId
  expertAssistantClinicStaffId: ClinicStaffId

  """医生：诊所诊疗费（挂号费）"""
  reservationFee: Float

  """科室"""
  clinicDepartmentId: ClinicDepartmentId
  nurseId: NurseId

  """微信号"""
  clinicWechatUserId: ClinicWechatUserId

  """诊所执业权限"""
  jobPermission: String

  """是否为专家特助 1：是 0：否"""
  expertAssistant: Float
}

input UpdateClinicUserInput {
  clinicUserId: ClinicUserId!
  isBlocked: Boolean!
  clientMutationId: String!
}

type UpdateClinicUserPayload {
  clinicUser: ClinicUser
  clientMutationId: String!
}

input UpdateClinicUserRoleInput {
  id: ClinicUserRoleId!
  values: UpdateClinicUserRoleValuesInput
  clientMutationId: String!
}

type UpdateClinicUserRolePayload {
  changedClinicUserRole: ClinicUserRole
  clientMutationId: String!
}

input UpdateClinicUserRoleValuesInput {
  role: String
}

input UpdateClinicUserSessionInput {
  id: ClinicUserSessionId!
  values: UpdateClinicUserSessionValuesInput
  clientMutationId: String!
}

type UpdateClinicUserSessionPayload {
  changedClinicUserSession: ClinicUserSession
  clientMutationId: String!
}

input UpdateClinicUserSessionValuesInput {
  clinicUserId: ClinicUserId
  clinicId: ClinicId
  accessToken: String
  lastActiveAt: Date
}

input UpdateClinicUserStudyInput {
  id: ClinicUserStudyId!
  values: UpdateClinicUserStudyValuesInput
  clientMutationId: String!
}

type UpdateClinicUserStudyPayload {
  changedClinicUserStudy: ClinicUserStudy
  clientMutationId: String!
}

input UpdateClinicUserStudyValuesInput {
  clinicUserId: ClinicUserId

  """课程事件类型"""
  lessonKey: String

  """课程名称"""
  lessonName: String

  """
  课程类型(Clinic: "诊所站", Pharmacy: "药房站", Nurse: "护士站", Collect: "收银站", Doctor: "医生站")
  """
  lessonType: UpdateClinicUserStudyValuesLessonType
  star: Int
}

enum UpdateClinicUserStudyValuesLessonType {
  Clinic
  Pharmacy
  Nurse
  Collect
  Doctor
}

input UpdateClinicValuesInput {
  """诊所名称"""
  name: String

  """诊所代码"""
  code: String

  """诊所所在城市"""
  cityId: CityId

  """诊所所在省份"""
  provinceId: ProvinceId

  """诊所所在大区"""
  areaId: AreaId

  """诊所所属省公司"""
  companyId: CompanyId

  """诊所封面"""
  coverImageId: ImageId

  """诊所地址"""
  address: String

  """诊所联系人号码"""
  phoneNumber: String

  """诊所联系人姓名"""
  contactName: String

  """诊所联系人电话"""
  contactPhone: String

  """诊所简介"""
  description: String

  """是否归档"""
  archived: Boolean

  """诊所经度"""
  longitude: Float

  """诊所纬度"""
  latitude: Float

  """是否为院外处方诊所"""
  isE01Clinic: Boolean

  """诊所是否可预约"""
  isReservation: Boolean

  """诊所标签"""
  tags: String

  """诊所营业状态"""
  status: String

  """营业开始时间"""
  openTime: Date

  """营业结束时间"""
  closeTime: Date
}

input UpdateClinicWechatUserInput {
  id: ClinicWechatUserId!
  values: UpdateClinicWechatUserValuesInput
  clientMutationId: String!
}

type UpdateClinicWechatUserPayload {
  changedClinicWechatUser: ClinicWechatUser
  clientMutationId: String!
}

input UpdateClinicWechatUserValuesInput {
  openid: String
  nickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float
  province: String
  city: String

  """国家，如中国为CN"""
  country: String
  headImgUrl: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String
}

input UpdateConfigInput {
  configId: ConfigId!
  value: String!
  title: String
  description: String
  clientMutationId: String!
}

type UpdateConfigPayload {
  changeConfig: Config
  clientMutationId: String!
}

input UpdateContactMsgInput {
  id: ContactMsgId!
  values: UpdateContactMsgValuesInput
  clientMutationId: String!
}

type UpdateContactMsgPayload {
  changedContactMsg: ContactMsg
  clientMutationId: String!
}

input UpdateContactMsgQueueInput {
  id: ContactMsgQueueId!
  values: UpdateContactMsgQueueValuesInput
  clientMutationId: String!
}

type UpdateContactMsgQueuePayload {
  changedContactMsgQueue: ContactMsgQueue
  clientMutationId: String!
}

input UpdateContactMsgQueueValuesInput {
  """诊所id"""
  clinicId: Float

  """对象id"""
  originId: Float

  """消息队列"""
  type: UpdateContactMsgQueueValuesType

  """消息队列状态"""
  status: UpdateContactMsgQueueValuesStatus
}

enum UpdateContactMsgQueueValuesStatus {
  waiting
  send
  finished
}

enum UpdateContactMsgQueueValuesType {
  MEDICINE_EXPIRING
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

input UpdateContactMsgValuesInput {
  """模板标题"""
  title: String

  """模板说明（触发规则）"""
  description: String

  """消息key"""
  key: UpdateContactMsgValuesKey

  """触达范围。PATIENTS：全部患者；CLINICS：诊所"""
  target: UpdateContactMsgValuesTarget

  """短信模板，json对象，data：消息内容；priority：优先级，0-4，值越高优先级越高。0：不启用；"""
  sms: Json

  """
  微信模板，同短信，data里面再分级。{templateId：模板id；url：跳转链接；data：[{name, key, value}]}
  """
  wechat: Json

  """邮件模板，同短信。data里面再分级 {title, content}"""
  email: Json

  """模板状态：NORMAL：正常；BLOCKED：已停用"""
  status: UpdateContactMsgValuesStatus
}

enum UpdateContactMsgValuesKey {
  ORDER_OFFLINE
  ORDER_ONLINE
  ORDER_IN_SITE
  PATIENT_DAY
  PATIENT_TODAY
  MEDICINE_EXPIRING
  MEDICINE_EXPIRED
  MEDICINE_UNDER_STOCK
  MEDICINE_UPPER_STOCK
}

enum UpdateContactMsgValuesStatus {
  NORMAL
  BLOCKED
}

enum UpdateContactMsgValuesTarget {
  PATIENTS
  CLINICS
}

input UpdateExpressCompanyInput {
  id: ExpressCompanyId!
  values: UpdateExpressCompanyValuesInput
  clientMutationId: String!
}

type UpdateExpressCompanyPayload {
  changedExpressCompany: ExpressCompany
  clientMutationId: String!
}

input UpdateExpressCompanyValuesInput {
  """公司名字"""
  name: String

  """公司编码"""
  code: String

  """备注信息"""
  remark: String

  """国家英文"""
  en: String
}

input UpdateFileInput {
  id: FileId!
  values: UpdateFileValuesInput
  clientMutationId: String!
}

type UpdateFilePayload {
  changedFile: File
  clientMutationId: String!
}

input UpdateFileValuesInput {
  name: String
  url: String
  size: Float
  contentType: String
}

input UpdateFunctionModuleConfigInput {
  id: FunctionModuleConfigId!
  values: UpdateFunctionModuleConfigValuesInput
  clientMutationId: String!
}

type UpdateFunctionModuleConfigPayload {
  changedFunctionModuleConfig: FunctionModuleConfig
  clientMutationId: String!
}

input UpdateFunctionModuleConfigValuesInput {
  """名称"""
  name: String

  """key，不可修改"""
  key: String

  """默认值：是否开启"""
  defaultValue: Boolean
}

input UpdateHospitalDepartmentInput {
  id: HospitalDepartmentId!
  values: UpdateHospitalDepartmentValuesInput
  clientMutationId: String!
}

type UpdateHospitalDepartmentPayload {
  changedHospitalDepartment: HospitalDepartment
  clientMutationId: String!
}

input UpdateHospitalDepartmentValuesInput {
  name: String
  hospitalId: HospitalId
}

input UpdateHospitalInput {
  id: HospitalId!
  values: UpdateHospitalValuesInput
  clientMutationId: String!
}

type UpdateHospitalPayload {
  changedHospital: Hospital
  clientMutationId: String!
}

enum UpdateHospitalValuesHospitalType {
  Public
  Private
  Unknown
}

input UpdateHospitalValuesInput {
  name: String
  code: String

  """别名，多个以逗号隔开；"""
  alias: String
  provinceId: ProvinceId
  cityId: CityId
  districtId: DistrictId

  """大区"""
  areaId: AreaId
  companyId: CompanyId
  levelId: LevelId

  """Public:公立，Private:民营，Unknown：未知"""
  hospitalType: UpdateHospitalValuesHospitalType
  enabled: Boolean
}

input UpdateImageInput {
  id: ImageId!
  values: UpdateImageValuesInput
  clientMutationId: String!
}

type UpdateImagePayload {
  changedImage: Image
  clientMutationId: String!
}

input UpdateImageValuesInput {
  url: String
  size: Float
  contentType: String
}

type UpdateMemberDataChangeMemberPayload {
  isIntro: Boolean
}

input UpdateMemberDataInput {
  patientId: PatientId
  member: UpdateMemberDataMemberInput
  clientMutationId: String!
}

input UpdateMemberDataMemberInput {
  realName: String!
  clinicMemberSerialNo: String
  clinicMemberType: ClinicMemberTypeId
  phoneNumber: String
  gender: Int
  age: Int
}

type UpdateMemberDataPayload {
  changeMember: UpdateMemberDataChangeMemberPayload
  clientMutationId: String!
}

input UpdatePatientInput {
  id: PatientId!
  values: UpdatePatientValuesInput
  clientMutationId: String!
}

input UpdatePatientMessageInput {
  patientId: PatientId!
  realName: String
  phoneNumber: String
  dateOfBirth: Date
  age: Float
  clinicMemberSerialNo: String
  clinicMemberTypeId: ClinicMemberTypeId
  gender: Int
  idCardNumber: String
  maritalStatus: String
  occupation: String
  ethnicGroup: String
  address: String
  socialSecurityCard: String
  telephoneNumber: String
  clientMutationId: String!
}

type UpdatePatientMessagePayload {
  patient: Patient
  clientMutationId: String!
}

type UpdatePatientPayload {
  changedPatient: Patient
  clientMutationId: String!
}

input UpdatePatientValuesInput {
  """真实姓名"""
  realName: String

  """1 男；2 女；3 不详"""
  gender: Int

  """出生日期"""
  dateOfBirth: Date

  """年龄"""
  age: Float

  """年龄记录时间"""
  ageRecordedAt: Date

  """手机号"""
  phoneNumber: String

  """电话"""
  telephoneNumber: String

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """婚否"""
  maritalStatus: String

  """职业"""
  occupation: String

  """名族"""
  ethnicGroup: String

  """公司"""
  company: String

  """所在省"""
  provinceId: ProvinceId

  """所在市"""
  cityId: CityId

  """详细地址"""
  address: String

  """出生地"""
  birthPlace: String

  """来源"""
  source: String

  """头像"""
  avatarImageId: ImageId

  """诊所会员序列号"""
  clinicMemberSerialNo: String

  """社保卡"""
  socialSecurityCard: String

  """拼音码"""
  pinyinCode: String

  """手机号码是否已验证"""
  validatedPhone: Boolean
}

input UpdatePermissionInput {
  id: PermissionId!
  values: UpdatePermissionValuesInput
  clientMutationId: String!
}

type UpdatePermissionPayload {
  changedPermission: Permission
  clientMutationId: String!
}

input UpdatePermissionValuesInput {
  """权限名称"""
  name: String

  """权限编码"""
  code: String

  """排序"""
  sort: Int

  """父权限编码"""
  parentCode: String
}

input UpdateTaskInput {
  id: TaskId!
  values: UpdateTaskValuesInput
  clientMutationId: String!
}

type UpdateTaskPayload {
  changedTask: Task
  clientMutationId: String!
}

input UpdateTaskValuesInput {
  """任务名称"""
  name: String

  """所在诊所"""
  clinicId: ClinicId
  createById: ClinicUserId
  type: UpdateTaskValuesType

  """等待处理、处理中、完成、失败、挂起"""
  status: UpdateTaskValuesStatus

  """导出的文件或要导入的文件url"""
  url: String
  md5: String

  """用户是否已查看"""
  checked: Boolean
  startAt: Date
  endAt: Date
  condition: String

  """处理结果"""
  processResult: String

  """处理结果URL(如：导入时产生的错误信息文件)"""
  processResultUrl: String
}

enum UpdateTaskValuesStatus {
  WaitingProcess
  Processing
  Complete
  Failure
  HoldOn
}

enum UpdateTaskValuesType {
  ExportBillingItemReport
  ExportBillingRecordDailyReport
  ExportBillingRecordSummaryReport
  ExportStockDeliveryReport
  ExportStockEntryReport
  ExportStockReport
  ExportMaterialDeliveryReport
  ExportMaterialEntryReport
  ExportMaterialStockReport
  ImportDrug
  ExportDoctorBusinessReport
  ExportFinancialDailyReport
  ExportCheckBody
}

input UpdateUserClinicsInput {
  clinicId: ClinicId!
  enabled: Boolean!
  isBlocked: Boolean!
  jobTypeId: JobTypeNameId
  clinicDepartmentId: ClinicDepartmentId
  reservationFee: Float
  insteadDoctorId: DoctorId
}

input UpdateUserClinicStatusInput {
  clinicStaffId: ClinicStaffId!
  isBlocked: Boolean!
  clientMutationId: String!
}

type UpdateUserClinicStatusPayload {
  changedClinicStaff: ClinicStaff
  clientMutationId: String!
}

enum UpdateUserDoctorType {
  clinicFullTime
  clinicExpert
  alu
  hierarchicalDiagnosis
  livzonCustomer
  externalDoctor
}

input UpdateUserInput {
  clinicUserId: ClinicUserId!
  jobPositionId: JobPositionNameId!
  realName: String!
  gender: Int
  birthday: Date
  email: String
  idCardNumber: String
  cityId: CityId
  provinceId: ProvinceId
  clinicWechatUserId: ClinicWechatUserId

  """系统身份：诊所全职医生，诊所坐诊专家，阿鹿医生，分级诊疗医生，丽珠医生客户,诊所院外专家"""
  doctorType: UpdateUserDoctorType
  hospitals: [HospitalId]
  clinics: [UpdateUserClinicsInput]
  nurseId: NurseId
  doctorId: DoctorId
  isBound: Boolean
  clientMutationId: String!
}

input UpdateUserPatientInput {
  """患者id"""
  userPatientId: UserPatientId!

  """真实姓名"""
  realName: String!

  """1 男；2 女；3 不详"""
  gender: Int

  """出生日期"""
  dateOfBirth: Date

  """年龄"""
  age: Float

  """记录时的年龄"""
  ageRecordedAt: Date

  """手机号"""
  phoneNumber: String

  """邮箱"""
  email: String

  """身份证号"""
  idCardNumber: String

  """婚否"""
  maritalStatus: String

  """职业"""
  occupation: String

  """民族"""
  ethnicGroup: String

  """公司"""
  company: String

  """所在省"""
  province: ProvinceId

  """所在市"""
  city: CityId

  """详细地址"""
  address: String

  """出生地"""
  birthPlace: String

  """来源"""
  source: String

  """头像"""
  avatarImage: ImageId

  """诊所会员序列号"""
  clinicMemberSerialNo: String

  """是否默认"""
  isDefault: Boolean
  clientMutationId: String!
}

type UpdateUserPatientPayload {
  changedUserPatient: UserPatient
  clientMutationId: String!
}

type UpdateUserPayload {
  clinicUser: ClinicUser
  clientMutationId: String!
}

input UpdateWechatConfigInput {
  id: WechatConfigId!
  values: UpdateWechatConfigValuesInput
  clientMutationId: String!
}

type UpdateWechatConfigPayload {
  changedWechatConfig: WechatConfig
  clientMutationId: String!
}

input UpdateWechatConfigValuesInput {
  """配置键名"""
  key: String

  """配置值"""
  value: String

  """配置说明"""
  description: String

  """是否是只读配置"""
  readOnly: Boolean
}

input UpdateWechatUserInput {
  id: WechatUserId!
  values: UpdateWechatUserValuesInput
  clientMutationId: String!
}

type UpdateWechatUserPayload {
  changedWechatUser: WechatUser
  clientMutationId: String!
}

input UpdateWechatUserValuesInput {
  """微信的openid"""
  openid: String

  """微信昵称"""
  wechatNickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float

  """头像"""
  headImgId: ImageId

  """用户所在省"""
  province: String

  """用户所在市"""
  city: String

  """国家，如中国为CN"""
  country: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String

  """用户登录的token"""
  accessToken: String

  """刷新的token值"""
  refreshToken: String

  """有效期"""
  expiredAt: Date

  """是否已关注"""
  subscribe: Boolean

  """关注时间"""
  subscribeAt: Date

  """上次活跃时间"""
  lastMpActiveAt: Date

  """用户id"""
  userId: UserId

  """所属诊所，扫描阿鹿小护给诊所生成的二维码生成"""
  clinicId: ClinicId
}

input UploadClinicFileInput {
  clinicId: ClinicId!
  fileName: String!
  fileUrl: String!
  fileSize: Int!
  contentType: String!
  description: String
  clientMutationId: String!
}

type UploadClinicFilePayload {
  clinicFile: ClinicFile
  clientMutationId: String!
}

input UploadImageInput {
  clientMutationId: String!
}

type UploadImagePayload {
  image: Image
  clientMutationId: String!
}

"""用户信息"""
type User implements Node {
  id: ID!

  """用户名"""
  username: String!

  """昵称"""
  nickname: String!

  """密码"""
  passwordHash: String
  avatarId: ID

  """头像"""
  avatar: Image

  """手机号"""
  phoneNumber: String
  cityId: ID

  """所在市"""
  city: City

  """注册时间"""
  registeredAt: Date

  """上次活跃时间"""
  lastActiveAt: Date
  createdAt: Date
  updatedAt: Date

  """用户创建的患者信息"""
  userPatients: [UserPatient]
  historicalSearchs(
    """返回的记录应该在cursor:after之后"""
    after: String

    """指定最多返回记录的数量"""
    first: Float
    before: String
    last: Float
  ): SearchConnection
  wechatUser: WechatUser
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
  count: Float
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of User"""
scalar UserId

"""用户和患者关联表"""
type UserPatient implements Node {
  id: ID!

  """患者类型。reservation：预约创建的。external：院外处方创建的"""
  type: UserPatientType!
  patientId: ID

  """患者id"""
  patient: Patient!
  userId: ID

  """用户id"""
  user: User!

  """是否是默认患者"""
  isDefault: Boolean

  """状态"""
  status: Boolean
  deletedAt: Date
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type UserPatientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserPatientEdge]
  count: Float
}

"""An edge in a connection."""
type UserPatientEdge {
  """The item at the end of the edge"""
  node: UserPatient

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of UserPatient"""
scalar UserPatientId

input UserPatientsConditionInput {
  """患者类型。reservation：预约创建的。external：院外处方创建的"""
  type: UserPatientsConditionType

  """患者id"""
  patientId: PatientId

  """用户id"""
  userId: UserId

  """是否是默认患者"""
  isDefault: Boolean

  """状态"""
  status: Boolean
  deletedAt: DateConditionInput
}

enum UserPatientsConditionType {
  e01
  reservation
  external
}

input UserPatientsKeywordsInput {
  fields: [String]!
  value: String!
}

input UserPatientsOptionsInput {
  where: Json
  group: String
}

input UserPatientsSortInput {
  field: String
  order: SortOrder
}

enum UserPatientType {
  e01
  reservation
  external
}

input UsersConditionInput {
  """用户名"""
  username: String

  """昵称"""
  nickname: String

  """密码"""
  passwordHash: String

  """头像"""
  avatarId: ImageId

  """手机号"""
  phoneNumber: String

  """所在市"""
  cityId: CityId
  registeredAt: DateConditionInput
  lastActiveAt: DateConditionInput
}

input UsersKeywordsInput {
  fields: [String]!
  value: String!
}

input UsersOptionsInput {
  where: Json
  group: String
}

input UsersSortInput {
  field: String
  order: SortOrder
}

input ValidatePatientPhoneNumberInput {
  """患者ID"""
  patientId: PatientId

  """患者姓名"""
  name: String!

  """患者年龄"""
  age: Int!

  """手机号码"""
  phoneNumber: String!

  """验证码"""
  code: String!
  clientMutationId: String!
}

type ValidatePatientPhoneNumberPayload {
  patient: Patient
  clientMutationId: String!
}

"""版本历史"""
type VersionHistory implements Node {
  id: ID!

  """版本名称"""
  name: String!

  """链接"""
  link: String!

  """版本描述"""
  description: String

  """开始时间"""
  startAt: Date!

  """结束时间"""
  endAt: Date!
  createdById: ID

  """创建者，关联诊所用户id"""
  createdBy: ClinicUser!

  """是否可用"""
  enabled: Boolean
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type VersionHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VersionHistoryEdge]
  count: Float
}

"""An edge in a connection."""
type VersionHistoryEdge {
  """The item at the end of the edge"""
  node: VersionHistory

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of VersionHistory"""
scalar VersionHistoryId

input VersionHistorysConditionInput {
  """版本名称"""
  name: String

  """链接"""
  link: String

  """版本描述"""
  description: String
  startAt: DateConditionInput
  endAt: DateConditionInput

  """创建者，关联诊所用户id"""
  createdById: ClinicUserId

  """是否可用"""
  enabled: Boolean
}

input VersionHistorysKeywordsInput {
  fields: [String]!
  value: String!
}

input VersionHistorysOptionsInput {
  where: Json
  group: String
}

input VersionHistorysSortInput {
  field: String
  order: SortOrder
}

"""微信配置"""
type WechatConfig implements Node {
  id: ID!

  """配置键名"""
  key: String

  """配置值"""
  value: String

  """配置说明"""
  description: String

  """是否是只读配置"""
  readOnly: Boolean
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatConfigEdge]
  count: Float
}

"""An edge in a connection."""
type WechatConfigEdge {
  """The item at the end of the edge"""
  node: WechatConfig

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatConfig"""
scalar WechatConfigId

input WechatConfigsConditionInput {
  """配置键名"""
  key: String

  """配置值"""
  value: String

  """配置说明"""
  description: String

  """是否是只读配置"""
  readOnly: Boolean
}

input WechatConfigsKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatConfigsOptionsInput {
  where: Json
  group: String
}

input WechatConfigsSortInput {
  field: String
  order: SortOrder
}

"""微信事件消息记录日志"""
type WechatEventMessageLog implements Node {
  id: ID!

  """微信openid"""
  openid: String!

  """接收者信息，目前表示用户的openid或者当前公众号的id（非appId）"""
  toUserName: String
  createTime: Date

  """消息类型"""
  type: WechatEventMessageLogType

  """二维码的eventKey"""
  qrCodeEventKey: String

  """二维码的ticket"""
  ticket: String

  """点击事件对应的eventKey"""
  clickEventKey: String

  """浏览页面的eventKey"""
  viewEventKey: String

  """模板发送状态"""
  templateSendJobFinishStatus: String
  massSendJobFinish: String

  """包含经纬度, 地图缩放大小, 地理微信信息.  json字符串保存"""
  location: String

  """原始数据"""
  raw: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatEventMessageLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatEventMessageLogEdge]
  count: Float
}

"""An edge in a connection."""
type WechatEventMessageLogEdge {
  """The item at the end of the edge"""
  node: WechatEventMessageLog

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatEventMessageLog"""
scalar WechatEventMessageLogId

input WechatEventMessageLogsConditionInput {
  """微信openid"""
  openid: String

  """接收者信息，目前表示用户的openid或者当前公众号的id（非appId）"""
  toUserName: String
  createTime: DateConditionInput

  """消息类型"""
  type: WechatEventMessageLogsConditionType

  """二维码的eventKey"""
  qrCodeEventKey: String

  """二维码的ticket"""
  ticket: String

  """点击事件对应的eventKey"""
  clickEventKey: String

  """浏览页面的eventKey"""
  viewEventKey: String

  """模板发送状态"""
  templateSendJobFinishStatus: String
  massSendJobFinish: String

  """包含经纬度, 地图缩放大小, 地理微信信息.  json字符串保存"""
  location: String

  """原始数据"""
  raw: String
}

enum WechatEventMessageLogsConditionType {
  subscribe
  unsubscribe
  scan
  location
  click
  view
  unknown
  templateSendJobFinish
  massSendJobFinish
}

input WechatEventMessageLogsKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatEventMessageLogsOptionsInput {
  where: Json
  group: String
}

input WechatEventMessageLogsSortInput {
  field: String
  order: SortOrder
}

enum WechatEventMessageLogType {
  subscribe
  unsubscribe
  scan
  location
  click
  view
  unknown
  templateSendJobFinish
  massSendJobFinish
}

"""用户发给微信的消息记录日志"""
type WechatInMessageLog implements Node {
  id: ID!

  """微信openid"""
  openid: String!

  """接收者，微信公众号id（非appId）"""
  toUserName: String
  createTime: Date

  """微信端回调的消息类型"""
  type: WechatInMessageLogType

  """消息id"""
  msgid: String

  """文本消息类容"""
  msgText: String

  """图片ID"""
  msgImageid: String

  """图片URL"""
  msgImageUrl: String

  """媒体ID"""
  msgMediaid: String
  msgFormat: String
  recognition: String

  """压缩的素材id"""
  thumbMediaid: String

  """包含经纬度, 地图缩放大小, 地理微信信息.  json字符串保存"""
  location: String

  """超链接消息标题"""
  linkTitle: String

  """包含url, 描述的json字符串"""
  linkData: String

  """原始数据"""
  raw: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatInMessageLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatInMessageLogEdge]
  count: Float
}

"""An edge in a connection."""
type WechatInMessageLogEdge {
  """The item at the end of the edge"""
  node: WechatInMessageLog

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatInMessageLog"""
scalar WechatInMessageLogId

input WechatInMessageLogsConditionInput {
  """微信openid"""
  openid: String

  """接收者，微信公众号id（非appId）"""
  toUserName: String
  createTime: DateConditionInput

  """微信端回调的消息类型"""
  type: WechatInMessageLogsConditionType

  """消息id"""
  msgid: String

  """文本消息类容"""
  msgText: String

  """图片ID"""
  msgImageid: String

  """图片URL"""
  msgImageUrl: String

  """媒体ID"""
  msgMediaid: String
  msgFormat: String
  recognition: String

  """压缩的素材id"""
  thumbMediaid: String

  """包含经纬度, 地图缩放大小, 地理微信信息.  json字符串保存"""
  location: String

  """超链接消息标题"""
  linkTitle: String

  """包含url, 描述的json字符串"""
  linkData: String

  """原始数据"""
  raw: String
}

enum WechatInMessageLogsConditionType {
  text
  image
  voice
  video
  shortvideo
  location
  link
  event
  unknow
}

input WechatInMessageLogsKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatInMessageLogsOptionsInput {
  where: Json
  group: String
}

input WechatInMessageLogsSortInput {
  field: String
  order: SortOrder
}

enum WechatInMessageLogType {
  text
  image
  voice
  video
  shortvideo
  location
  link
  event
  unknow
}

type WechatJsConfigPayload {
  appId: String
  timestamp: String
  nonceStr: String
  signature: String
  jsApiList: [String]
}

"""微信二维码"""
type WechatQrCode implements Node {
  id: ID!
  sceneid: Float
  ticket: String!
  url: String
  sceneType: String
  sceneInfo: String
  owner: WechatUser

  """标记二维码的用途"""
  remark: String

  """扫描二维码后的自动回复设置"""
  reply: String

  """是否可以修改"""
  mutable: Boolean

  """原二维码与logo合成的二维码"""
  mixImageUrl: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatQrCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatQrCodeEdge]
  count: Float
}

"""An edge in a connection."""
type WechatQrCodeEdge {
  """The item at the end of the edge"""
  node: WechatQrCode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatQrCode"""
scalar WechatQrCodeId

input WechatQrCodesConditionInput {
  sceneid: Float
  ticket: String
  url: String
  sceneType: String
  sceneInfo: String
  ownerId: WechatUserId

  """标记二维码的用途"""
  remark: String

  """扫描二维码后的自动回复设置"""
  reply: String

  """是否可以修改"""
  mutable: Boolean

  """原二维码与logo合成的二维码"""
  mixImageUrl: String
}

input WechatQrCodesKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatQrCodesOptionsInput {
  where: Json
  group: String
}

input WechatQrCodesSortInput {
  field: String
  order: SortOrder
}

"""微信被动回复的消息"""
type WechatReplyMessage implements Node {
  id: ID!
  name: String!

  """消息类型, text(文本), image(图片), voice(语音), video(视频), music(音乐), news(图文)"""
  type: WechatReplyMessageType!

  """JSON格式字符串,key值为驼峰命名方式"""
  values: String
  description: String

  """数值越大,优先级越高"""
  priority: Int
  enabled: Boolean
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatReplyMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatReplyMessageEdge]
  count: Float
}

"""An edge in a connection."""
type WechatReplyMessageEdge {
  """The item at the end of the edge"""
  node: WechatReplyMessage

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatReplyMessage"""
scalar WechatReplyMessageId

input WechatReplyMessagesConditionInput {
  name: String

  """消息类型, text(文本), image(图片), voice(语音), video(视频), music(音乐), news(图文)"""
  type: WechatReplyMessagesConditionType

  """JSON格式字符串,key值为驼峰命名方式"""
  values: String
  description: String

  """数值越大,优先级越高"""
  priority: Int
  enabled: Boolean
}

enum WechatReplyMessagesConditionType {
  text
  image
  voice
  video
  music
  news
}

input WechatReplyMessagesKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatReplyMessagesOptionsInput {
  where: Json
  group: String
}

input WechatReplyMessagesSortInput {
  field: String
  order: SortOrder
}

enum WechatReplyMessageType {
  text
  image
  voice
  video
  music
  news
}

"""接收到微信的文本消息"""
type WechatTextMessage implements Node {
  id: ID!

  """消息名称"""
  name: String!

  """消息匹配规则值"""
  rule: String!

  """消息回复方式, RAND(随机), DESC(降序), ASC(升序), PRIORITY(回复消息的优先级)"""
  replyType: WechatTextMessageReplyType!
  description: String

  """数值越大,优先级越高"""
  priority: Int
  enabled: Boolean
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatTextMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatTextMessageEdge]
  count: Float
}

"""An edge in a connection."""
type WechatTextMessageEdge {
  """The item at the end of the edge"""
  node: WechatTextMessage

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatTextMessage"""
scalar WechatTextMessageId

enum WechatTextMessageReplyType {
  RAND
  DESC
  ASC
  PRIORITY
}

input WechatTextMessagesConditionInput {
  """消息名称"""
  name: String

  """消息匹配规则值"""
  rule: String

  """消息回复方式, RAND(随机), DESC(降序), ASC(升序), PRIORITY(回复消息的优先级)"""
  replyType: WechatTextMessagesConditionReplyType
  description: String

  """数值越大,优先级越高"""
  priority: Int
  enabled: Boolean
}

enum WechatTextMessagesConditionReplyType {
  RAND
  DESC
  ASC
  PRIORITY
}

input WechatTextMessagesKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatTextMessagesOptionsInput {
  where: Json
  group: String
}

input WechatTextMessagesSortInput {
  field: String
  order: SortOrder
}

"""接收到微信的文本消息"""
type WechatTextMessageToReply implements Node {
  id: ID!
  wechatReplyMessageId: ID

  """微信回复的消息ID"""
  wechatReplyMessage: WechatReplyMessage!
  wechatTextMessageId: ID

  """微信文本消息ID"""
  wechatTextMessage: WechatTextMessage!
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatTextMessageToReplyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatTextMessageToReplyEdge]
  count: Float
}

"""An edge in a connection."""
type WechatTextMessageToReplyEdge {
  """The item at the end of the edge"""
  node: WechatTextMessageToReply

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatTextMessageToReply"""
scalar WechatTextMessageToReplyId

input WechatTextMessageToReplysConditionInput {
  """微信回复的消息ID"""
  wechatReplyMessageId: WechatReplyMessageId

  """微信文本消息ID"""
  wechatTextMessageId: WechatTextMessageId
}

input WechatTextMessageToReplysKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatTextMessageToReplysOptionsInput {
  where: Json
  group: String
}

input WechatTextMessageToReplysSortInput {
  field: String
  order: SortOrder
}

"""
微信临时二维码。官方文档：https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1443433542
"""
type WechatTmpQrCode implements Node {
  id: ID!

  """场景值ID，临时二维码时为32位非0整型，永久二维码时最大值为100000（目前参数只支持1--100000）"""
  sceneid: Float

  """获取的二维码ticket，凭借此ticket可以在有效时间内换取二维码。"""
  ticket: String!

  """有效期"""
  expiredAt: Date

  """二维码图片解析后的地址，开发者可根据该地址自行生成需要的二维码图片"""
  url: String

  """场景类型"""
  sceneType: String

  """场景详情"""
  sceneInfo: String
  ownerId: ID

  """所属wechatUser"""
  owner: WechatUser

  """标记二维码的用途"""
  remark: String

  """扫描二维码后的自动回复设置"""
  reply: String

  """是否可以修改"""
  mutable: Boolean

  """原二维码与logo合成的二维码"""
  mixImageUrl: String

  """是否是永久二维码"""
  isLimit: Boolean

  """关联的id，可以是clinicId或者clinicDoctorId"""
  originId: String
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatTmpQrCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatTmpQrCodeEdge]
  count: Float
}

"""An edge in a connection."""
type WechatTmpQrCodeEdge {
  """The item at the end of the edge"""
  node: WechatTmpQrCode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatTmpQrCode"""
scalar WechatTmpQrCodeId

input WechatTmpQrCodesConditionInput {
  """场景值ID，临时二维码时为32位非0整型，永久二维码时最大值为100000（目前参数只支持1--100000）"""
  sceneid: Float

  """获取的二维码ticket，凭借此ticket可以在有效时间内换取二维码。"""
  ticket: String
  expiredAt: DateConditionInput

  """二维码图片解析后的地址，开发者可根据该地址自行生成需要的二维码图片"""
  url: String

  """场景类型"""
  sceneType: String

  """场景详情"""
  sceneInfo: String

  """所属wechatUser"""
  ownerId: WechatUserId

  """标记二维码的用途"""
  remark: String

  """扫描二维码后的自动回复设置"""
  reply: String

  """是否可以修改"""
  mutable: Boolean

  """原二维码与logo合成的二维码"""
  mixImageUrl: String

  """是否是永久二维码"""
  isLimit: Boolean

  """关联的id，可以是clinicId或者clinicDoctorId"""
  originId: String
}

input WechatTmpQrCodesKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatTmpQrCodesOptionsInput {
  where: Json
  group: String
}

input WechatTmpQrCodesSortInput {
  field: String
  order: SortOrder
}

"""微信用户"""
type WechatUser implements Node {
  id: ID!

  """微信的openid"""
  openid: String!

  """微信昵称"""
  wechatNickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float
  headImgId: ID

  """头像"""
  headImg: Image

  """用户所在省"""
  province: String

  """用户所在市"""
  city: String

  """国家，如中国为CN"""
  country: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String

  """用户登录的token"""
  accessToken: String

  """刷新的token值"""
  refreshToken: String

  """有效期"""
  expiredAt: Date

  """是否已关注"""
  subscribe: Boolean

  """关注时间"""
  subscribeAt: Date

  """上次活跃时间"""
  lastMpActiveAt: Date
  userId: ID

  """用户id"""
  user: User
  clinicId: ID

  """所属诊所，扫描阿鹿小护给诊所生成的二维码生成"""
  clinic: Clinic
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatUserEdge]
  count: Float
}

"""An edge in a connection."""
type WechatUserEdge {
  """The item at the end of the edge"""
  node: WechatUser

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatUser"""
scalar WechatUserId

input WechatUsersConditionInput {
  """微信的openid"""
  openid: String

  """微信昵称"""
  wechatNickname: String

  """用户的性别，值为1时是男性，值为2时是女性，值为0时是未知"""
  sex: Float

  """头像"""
  headImgId: ImageId

  """用户所在省"""
  province: String

  """用户所在市"""
  city: String

  """国家，如中国为CN"""
  country: String

  """用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）"""
  privilege: String

  """只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。"""
  unionid: String

  """用户登录的token"""
  accessToken: String

  """刷新的token值"""
  refreshToken: String
  expiredAt: DateConditionInput

  """是否已关注"""
  subscribe: Boolean
  subscribeAt: DateConditionInput
  lastMpActiveAt: DateConditionInput

  """用户id"""
  userId: UserId

  """所属诊所，扫描阿鹿小护给诊所生成的二维码生成"""
  clinicId: ClinicId
}

"""微信端用户登录的session"""
type WechatUserSession implements Node {
  id: ID!
  wechatUserId: ID

  """关联微信用户id"""
  wechatUser: WechatUser!

  """登录的token"""
  accessToken: String!

  """上次活跃时间"""
  lastActiveAt: Date
  createdAt: Date
  updatedAt: Date
}

"""A connection to a list of items."""
type WechatUserSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WechatUserSessionEdge]
  count: Float
}

"""An edge in a connection."""
type WechatUserSessionEdge {
  """The item at the end of the edge"""
  node: WechatUserSession

  """A cursor for use in pagination"""
  cursor: String!
}

"""Global id of WechatUserSession"""
scalar WechatUserSessionId

input WechatUserSessionsConditionInput {
  """关联微信用户id"""
  wechatUserId: WechatUserId

  """登录的token"""
  accessToken: String
  lastActiveAt: DateConditionInput
}

input WechatUserSessionsKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatUserSessionsOptionsInput {
  where: Json
  group: String
}

input WechatUserSessionsSortInput {
  field: String
  order: SortOrder
}

input WechatUsersKeywordsInput {
  fields: [String]!
  value: String!
}

input WechatUsersOptionsInput {
  where: Json
  group: String
}

input WechatUsersSortInput {
  field: String
  order: SortOrder
}

type WxJsConfigPayload {
  appId: String
  timestamp: String
  nonceStr: String
  signature: String
  jsApiList: [String]
}
